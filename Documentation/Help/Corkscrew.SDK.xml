<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Corkscrew.SDK</name>
  </assembly>
  <members>
    <member name="T:Corkscrew.SDK.constants.ChangeTypeEnum">
      <summary>
            Enumeration of the type of change operation performed
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.constants.ChangeTypeEnum.Unknown">
      <summary>
            Unknown or default value
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.constants.ChangeTypeEnum.Create">
      <summary>
            Create or insert type of change
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.constants.ChangeTypeEnum.Update">
      <summary>
            Modify or update type of change
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.constants.ChangeTypeEnum.Delete">
      <summary>
            Delete or drop type of change
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.constants.FileSystemEntryLocationEnum">
      <summary>
            Enumeration of the location of a FileSystemEntry object.
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.constants.FileSystemEntryLocationEnum.Unknown">
      <summary>
            This value used to initialize variables of this type
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.constants.FileSystemEntryLocationEnum.ConfigDB">
      <summary>
            Location is in Configuration database
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.constants.FileSystemEntryLocationEnum.SiteDB">
      <summary>
            Location is in Site database
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.constants.LoggingConstants">
      <summary>
            Constants and enumerations used for diagnostics (tracing and logging).
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.constants.LoggingConstants.GetEventSourceName(System.String)">
      <summary>
            Returns an event source name for a given module
            </summary>
      <param name="moduleName">Name of the module</param>
      <returns>Event source name to be used</returns>
    </member>
    <member name="F:Corkscrew.SDK.constants.LoggingConstants.LOG_EVENTID_ERROR">
      <summary>
            Logging event Id for Error messages
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.constants.LoggingConstants.LOG_EVENTID_INFO">
      <summary>
            Logging event Id for Information messages
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.constants.LoggingConstants.LOG_EVENTSOURCE_NAME_PRIMARY">
      <summary>
            Name of primary event source for logging
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.constants.LoggingConstants.LogEntryTypeEnum">
      <summary>
            Enum indicating type of log entry
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.constants.LoggingConstants.LogEntryTypeEnum.Information">
      <summary>
            Information message
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.constants.LoggingConstants.LogEntryTypeEnum.Error">
      <summary>
            Error message
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.constants.LoggingConstants.LogEntryTypeEnum.Trace">
      <summary>
            Trace or debug message (can be combined with Information or Error)
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.constants.ScopeEnum">
      <summary>
            Enumeration of the scope of a value or operation. This value is used to indicate the actual scope when 
            a method is dealing with multiple levels in the Corkscrew object hierarchy.
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.constants.ScopeEnum.Farm">
      <summary>
            Farm
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.constants.ScopeEnum.Site">
      <summary>
            Site
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.constants.ScopeEnum.Directory">
      <summary>
            Specific directory
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.constants.ScopeEnum.File">
      <summary>
            Specific File
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.constants.ScopeEnum.FileOrDirectory">
      <summary>
            A file or directory (used in functions where determining the actual type of object cannot be done).
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.constants.ScopeEnum.Invalid">
      <summary>
            Invalid scope (default value)
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.diagnostics.CSDiagnostics">
      <summary>
            Class helps in writing of logging and tracing messages. Messages are always written to the JournalLog table in the 
            ConfigDB database and may optionally be written to the Windows Event Log.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.diagnostics.CSDiagnostics.CreateEventSourceIfNotExists(System.String,System.String)">
      <summary>
            Create an EventLog source. 
            This method requires the calling code to run under a Local Administrator account on the particular machine.
            </summary>
      <param name="eventSourceName">Name of the event source to create</param>
      <param name="eventLogName">Name of the event log to create it in (default: Application)</param>
      <returns>True if log was created, false if something failed.</returns>
    </member>
    <member name="M:Corkscrew.SDK.diagnostics.CSDiagnostics.CreateLogEntry(System.Guid,System.Diagnostics.EventLogEntryType,System.String,System.String,System.Boolean,System.Exception,Corkscrew.SDK.objects.CSSite,Corkscrew.SDK.objects.CSFileSystemEntry,Corkscrew.SDK.security.CSUser,System.Boolean)">
      <summary>
            Create an entry in the logging infrastructure (Windows Event Log and database)
            </summary>
      <param name="CorrelationId">The correlation Guid (typically used by workflows)</param>
      <param name="type">EventLogEntryType of entry. Only Error and Information are used.</param>
      <param name="moduleName">Name of the module calling the function.</param>
      <param name="message">The error message to log.</param>
      <param name="isTracing">If true, this is a tracing message (debug/info)</param>
      <param name="error">If this is an exception being logged, the Exception object (used only if type == Error).</param>
      <param name="site">The CSSite associated with this event. NULL if global.</param>
      <param name="fileSystemEntry">The CSFileSystemEntry associated to this event. NULL if non-file related.</param>
      <param name="user">The CSUser attached to this event. NULL if no user.</param>
      <param name="writeToWindowsEventLog">If set, writes event to Windows Event Log as well. Otherwise writes only to the database log table.</param>
    </member>
    <member name="T:Corkscrew.SDK.exceptions.CSExceptionHelper">
      <summary>
            Class to help with Exception throwing and parsing
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.exceptions.CSExceptionHelper.GetExceptionFromValidationErrors(System.Collections.Generic.IEnumerable{Corkscrew.SDK.workflow.CSCompilerValidationError})">
      <summary>
            Converts an enumerable list of ValidationError objects into an Exception hierarchy.
            </summary>
      <param name="errors">ValidationError enumeration to convert</param>
      <returns>An Exception object</returns>
    </member>
    <member name="M:Corkscrew.SDK.exceptions.CSExceptionHelper.GetExceptionRollup(System.Exception)">
      <summary>
            Flattens the messages in an exception hierarchy. Does not provide a "stack trace" unlike Exception.ToString().
            </summary>
      <param name="exception">Top level exception to flatten</param>
      <returns>String with the compressed message.</returns>
    </member>
    <member name="M:Corkscrew.SDK.exceptions.CSExceptionHelper.ThrowIfNull(System.Object[])">
      <summary>
            Throws an ArgumentNullException on the first parameter (array) that evaluates to a NULL.
            </summary>
      <param name="array">Array of objects to evaluate for NULL</param>
      <exception cref="T:System.ArgumentNullException">Throws an ArgumentNullException by design.</exception>
    </member>
    <member name="M:Corkscrew.SDK.exceptions.CSExceptionHelper.ThrowIfNull(System.String,System.Object[])">
      <summary>
            Throws an ArgumentNullException on the first parameter (array) that evaluates to a NULL.
            </summary>
      <param name="message">The message to throw</param>
      <param name="array">Array of objects to evaluate for NULL</param>
      <exception cref="T:System.ArgumentNullException">Throws an ArgumentNullException by design.</exception>
    </member>
    <member name="M:Corkscrew.SDK.exceptions.CSExceptionHelper.ThrowIfNull(System.String[],System.Object[])">
      <summary>
            Throws an ArgumentNullException on the first parameter (array) that evaluates to a NULL.
            </summary>
      <param name="message">Optional array of messages. If no messages are found, a static message is thrown. If the number of messages is lesser than the number of array objects, 
            only the first message is used. Otherwise the message corresponding to the array index is used.</param>
      <param name="array">Array of objects to evaluate for NULL</param>
      <exception cref="T:System.ArgumentNullException">Throws an ArgumentNullException by design.</exception>
    </member>
    <member name="T:Corkscrew.SDK.exceptions.CSWorkflowException">
      <summary>
            This exception is thrown by the Corkscrew Workflow system.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.exceptions.CSWorkflowException.#ctor">
      <summary>
            Default Constructor, everthing set to NULL.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.exceptions.CSWorkflowException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor (used in serialization context)
            </summary>
      <param name="info">Serialization info</param>
      <param name="context">Streaming context</param>
    </member>
    <member name="M:Corkscrew.SDK.exceptions.CSWorkflowException.#ctor(System.String)">
      <summary>
            Constructor
            </summary>
      <param name="message">Exception message</param>
    </member>
    <member name="M:Corkscrew.SDK.exceptions.CSWorkflowException.#ctor(System.String,Corkscrew.SDK.workflow.CSWorkflowAssociation,System.Exception)">
      <summary>
            Constructor
            </summary>
      <param name="message">Exception message</param>
      <param name="association">Workflow association that caused the exception</param>
      <param name="innerException">Inner exception to attach</param>
    </member>
    <member name="M:Corkscrew.SDK.exceptions.CSWorkflowException.#ctor(System.String,Corkscrew.SDK.workflow.CSWorkflowDefinition,System.Exception)">
      <summary>
            Constructor
            </summary>
      <param name="message">Exception message</param>
      <param name="definition">Workflow definition that caused the exception</param>
      <param name="innerException">Inner exception to attach</param>
    </member>
    <member name="M:Corkscrew.SDK.exceptions.CSWorkflowException.#ctor(System.String,Corkscrew.SDK.workflow.CSWorkflowInstance,System.Exception)">
      <summary>
            Constructor
            </summary>
      <param name="message">Exception message</param>
      <param name="instance">Workflow instance that caused the exception</param>
      <param name="innerException">Inner exception to attach</param>
    </member>
    <member name="M:Corkscrew.SDK.exceptions.CSWorkflowException.#ctor(System.String,System.Exception)">
      <summary>
            Constructor
            </summary>
      <param name="message">Exception message</param>
      <param name="innerException">Inner exception to attach</param>
    </member>
    <member name="P:Corkscrew.SDK.exceptions.CSWorkflowException.Context">
      <summary>
            The context we were running in when the exception fired
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.exceptions.CSWorkflowException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Get object data (serialization)
            </summary>
      <param name="info">Serialization info</param>
      <param name="context">Streaming context</param>
    </member>
    <member name="P:Corkscrew.SDK.exceptions.CSWorkflowException.WorkflowAssociation">
      <summary>
            The workflow association (if we have one)
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.exceptions.CSWorkflowException.WorkflowDefinition">
      <summary>
            The workflow definition (if we have one)
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.exceptions.CSWorkflowException.WorkflowInstance">
      <summary>
            The workflow instance (if we have one)
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.exceptions.IsReadonlyException">
      <summary>
            This exception is thrown when an object or collection is set as readonly and a modification 
            operation is attempted on it.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.exceptions.IsReadonlyException.#ctor">
      <summary>
            Default Constructor, everthing set to NULL.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.exceptions.IsReadonlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor (used in serialization context)
            </summary>
      <param name="info">Serialization info</param>
      <param name="context">Streaming context</param>
    </member>
    <member name="M:Corkscrew.SDK.exceptions.IsReadonlyException.#ctor(System.String)">
      <summary>
            Constructor
            </summary>
      <param name="message">Exception message</param>
    </member>
    <member name="M:Corkscrew.SDK.exceptions.IsReadonlyException.#ctor(System.String,System.Exception)">
      <summary>
            Constructor
            </summary>
      <param name="message">Exception message</param>
      <param name="innerException">Inner exception to attach</param>
    </member>
    <member name="M:Corkscrew.SDK.exceptions.IsReadonlyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Get object data (serialization)
            </summary>
      <param name="info">Serialization info</param>
      <param name="context">Streaming context</param>
    </member>
    <member name="T:Corkscrew.SDK.objects.ColumnChangedEventHandler">
      <summary>
            Event handler delegate for ColumnChanged events fired by the CSTableColumnCollection
            </summary>
      <param name="table">The table that contains the column that changed</param>
      <param name="args">Information about the change</param>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSBaseCollection`1">
      <summary>
            Base collection class to implement collections of Corkscrew objects. 
            All methods except constructors and Dispose are thread-safe.
            NOTE: Implementation is borrowed from implementation of .NET Framework "Collection&lt;T&gt;" class.
            </summary>
      <typeparam name="T">T must be a class</typeparam>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSBaseCollection`1.#ctor(System.Boolean)">
      <summary>
            Constructor
            </summary>
      <param name="asReadonlyCollection">If set, initializes as readonly</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSBaseCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
      <summary>
            Constructor
            </summary>
      <param name="createFromCollection">Existing collection to initialize from</param>
      <param name="asReadonlyCollection">If set, initializes as readonly</param>
      <exception cref="T:System.ArgumentNullException">If createFromCollection is null</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSBaseCollection`1.AddInternal(`0,System.Boolean)">
      <summary>
            Adds a new item to the collection. 
            </summary>
      <param name="item">Item to add. Cannot be NULL.</param>
      <param name="respectReadonly">If set, checks for readonly. Otherwise ignores readonly.</param>
      <exception cref="T:Corkscrew.SDK.exceptions.IsReadonlyException">Thrown if collection is readonly</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if "item" is null</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSBaseCollection`1.AddInternalUniquely(`0,System.Boolean)">
      <summary>
            Adds a new item to the collection if it does not already exist.
            </summary>
      <param name="item">Item to add. Cannot be NULL.</param>
      <param name="respectReadonly">If set, will add only if collection is not set to readonly. Child classes may set this to false to override readonly behavior such 
            as when "manually" adding items in the constructor.</param>
      <exception cref="T:Corkscrew.SDK.exceptions.IsReadonlyException">Thrown if collection is readonly</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if "item" is null</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSBaseCollection`1.Clear">
      <summary>
            Clears the internal structures. Readonly is not checked.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSBaseCollection`1.Collection">
      <summary>
            Returns the underlying collection as readonly
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSBaseCollection`1.Count">
      <summary>
            Returns the number of items in the collection
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSBaseCollection`1.Dispose">
      <summary>
            Disposes the collection
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSBaseCollection`1.Dispose(System.Boolean)">
      <summary>
            Disposes the collection by clearing the internal collection
            </summary>
      <param name="disposing">Set to true if disposing</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSBaseCollection`1.Exists(System.Func{`0,System.Boolean})">
      <summary>
            Returns if a given item exists in the collection
            </summary>
      <param name="filters">Filters for the condition</param>
      <returns>True if item exists</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSBaseCollection`1.Find(System.Func{`0,System.Boolean})">
      <summary>
            Returns items matching the given condition
            </summary>
      <param name="filters">Condition to filter</param>
      <returns>Matching items</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSBaseCollection`1.GetEnumerator">
      <summary>
            Returns the enumerator
            </summary>
      <returns>IEnumerator for the collection</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSBaseCollection`1.IndexOf(`0)">
      <summary>
            Finds the index of the given item in the array.
            </summary>
      <param name="item">Item to find</param>
      <returns>Index if found, -1 if not.</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSBaseCollection`1.IsEmpty">
      <summary>
            Returns if the collection is empty
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSBaseCollection`1.IsReadonly">
      <summary>
            Returns if the collection is readonly (can be changed only via constructor).
            If it is readonly, add/remove will not work. Clear will work regardless.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSBaseCollection`1.Item(System.Int32)">
      <summary>
            Gets or Sets the element at the given index.  Collection cannot be readonly for setter.
            </summary>
      <exception cref="T:Corkscrew.SDK.exceptions.IsReadonlyException">Thrown by the setter if collection is readonly</exception>
      <exception cref="T:System.ArgumentException">Thrown if "index" is out of range. Property Get functions are not allowed to throw IndexOutOfRangeException.</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSBaseCollection`1.RemoveInternal(System.Int32)">
      <summary>
            Removes the item at the given index. Collection cannot be readonly.
            </summary>
      <param name="index">Index to remove item at</param>
      <exception cref="T:Corkscrew.SDK.exceptions.IsReadonlyException">Thrown if collection is readonly</exception>
      <exception cref="T:System.IndexOutOfRangeException">Thrown the provided "index" does not point to a current collection item</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSBaseCollection`1.RemoveInternal(`0,System.Boolean)">
      <summary>
            Removes the item from the collection. Collection cannot be readonly.
            </summary>
      <param name="item">Item to remove</param>
      <param name="respectReadonly">If set, will add only if collection is not set to readonly. Child classes may set this to false to override readonly behavior such 
            as when "manually" adding items in the constructor.</param>
      <exception cref="T:Corkscrew.SDK.exceptions.IsReadonlyException">Thrown if collection is readonly</exception>
    </member>
    <member name="F:Corkscrew.SDK.objects.CSBaseCollection`1.SyncRoot">
      <summary>
            Object to provide synchronous locking for read/write operations to the internal collection
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSBaseCollection`1.ThrowIfReadonly">
      <summary>
            Throws an IsReadonlyException if the collection is set to Readonly.
            </summary>
      <exception cref="T:Corkscrew.SDK.exceptions.IsReadonlyException">Thrown by design if IsReadonly is true.</exception>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSBaseCollection`1.CSBaseCollectionEnumerator">
      <summary>
            Enumerator implementation for CSBaseCollection
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSBaseCollection`1.CSBaseCollectionEnumerator.Current">
      <summary>
            Returns the current item
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSBaseCollection`1.CSBaseCollectionEnumerator.Dispose">
      <summary>
            Dispose the enumerator
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSBaseCollection`1.CSBaseCollectionEnumerator.Dispose(System.Boolean)">
      <summary>
            Dispose the enumerator
            </summary>
      <param name="disposing">Set to true if disposing</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSBaseCollection`1.CSBaseCollectionEnumerator.MoveNext">
      <summary>
            Moves the iterator to the next element.
            NOTE: Unlike Collection[T].Enumerator, we do not loop around to the start once we reach the end.
            Our iteration is 0-&gt;N without loopback!
            </summary>
      <returns>True if moved, false if position did not change.</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSBaseCollection`1.CSBaseCollectionEnumerator.Reset">
      <summary>
            Reset iterator to the start
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSConfigurationCollection">
      <summary>
            Collection of configuration key-pairs. Elements are CSKeyValuePair.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSConfigurationCollection.#ctor(Corkscrew.SDK.objects.CSFarm)">
      <summary>
            Constructor, initializes with all the configuration values in the farm.
            </summary>
      <param name="farm">The farm that the configuration is to be loaded for</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSConfigurationCollection.#ctor(Corkscrew.SDK.objects.CSFarm,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
      <summary>
            Constructor, initializes with provided dictionary of configuration values
            </summary>
      <param name="farm">The farm that the configuration is to be loaded for</param>
      <param name="configuration">Dictionary of keypair values for the configuration</param>
      <param name="isReadonly">If set, collection is marked as readonly. No elements may be added or removed after constructor call.</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSConfigurationCollection.Add(System.String,System.String)">
      <summary>
            Adds a new key value pair item to the collection
            </summary>
      <param name="name">Name of the configuration item</param>
      <param name="value">Value</param>
      <exception cref="T:System.UnauthorizedAccessException">If the authenticated user is not a Farm administrator</exception>
      <exception cref="T:System.ArgumentNullException">If the name or the value is NULL</exception>
      <exception cref="T:Corkscrew.SDK.exceptions.IsReadonlyException">If the collection is readonly</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSConfigurationCollection.Contains(System.String)">
      <summary>
            Returns if the collection contains an item with the given name.
            </summary>
      <param name="name">Name of the configuration item</param>
      <returns>True if item is found</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSConfigurationCollection.IndexOf(System.String)">
      <summary>
            Returns index of the given key. Returns -1 if not found.
            </summary>
      <param name="name">Name of the configuration item</param>
      <returns>Index of the item with the given name. (-1) if not found.</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSConfigurationCollection.Item(System.String)">
      <summary>
            Returns the configuration value corresponding to the given name
            </summary>
      <param name="name">Name of the configuration element</param>
      <returns>Value of the element</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSConfigurationCollection.Remove(System.String)">
      <summary>
            Removes an item with the given name
            </summary>
      <param name="name">Name of the configuration item</param>
      <exception cref="T:System.UnauthorizedAccessException">If the authenticated user is not a Farm administrator</exception>
      <exception cref="T:System.ArgumentNullException">If the name or the value is NULL</exception>
      <exception cref="T:Corkscrew.SDK.exceptions.IsReadonlyException">If the collection is readonly</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSConfigurationCollection.Update(System.String,System.String)">
      <summary>
            Updates an item with the given key
            </summary>
      <param name="name">Name (must already exist)</param>
      <param name="value">New value</param>
      <exception cref="T:System.UnauthorizedAccessException">If the authenticated user is not a Farm administrator</exception>
      <exception cref="T:System.ArgumentNullException">If the name or the value is NULL</exception>
      <exception cref="T:System.ArgumentException">If the name does not exist in the collection</exception>
      <exception cref="T:Corkscrew.SDK.exceptions.IsReadonlyException">If the collection is readonly</exception>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSDiagnosticsEntry">
      <summary>
            This class represents a single entry in the diagnostics/tracing backend table of JournalLog. Allows the caller to write new 
            messages to the diagnostics backend.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSDiagnosticsEntry.#ctor(System.Guid)">
      <summary>
            Constructor
            </summary>
      <param name="correlationId">Correlation Guid for the request or workflow</param>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSDiagnosticsEntry.CorrelationId">
      <summary>
            All messages with the same CorrelationId belong to the same workflow or request.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSDiagnosticsEntry.EntryType">
      <summary>
            Type of entry
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSDiagnosticsEntry.EventClass">
      <summary>
            Freeform name of the class of event
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSDiagnosticsEntry.EventId">
      <summary>
            EventId corresponding (corresponds to Event Log's Event Id)
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSDiagnosticsEntry.EventType">
      <summary>
            Freeform name of the type of event in the EventClass
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSDiagnosticsEntry.ExceptionStack">
      <summary>
            (Only if EntryType = Error) Exception stack dump
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSDiagnosticsEntry.FileSystemEntryId">
      <summary>
            Filesystem Entry Guid
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSDiagnosticsEntry.Id">
      <summary>
            Id of the entry
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSDiagnosticsEntry.MachineName">
      <summary>
            Name of the computer the event occured on
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSDiagnosticsEntry.Message">
      <summary>
            Logged message
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSDiagnosticsEntry.ModuleName">
      <summary>
            (Only if EntryType = Trace) Name of the module or class or function that is logging the event
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSDiagnosticsEntry.Save">
      <summary>
            Writes the diagnostic data to the JournalLog table in ConfigDB
            </summary>
      <exception cref="T:System.ArgumentNullException">If either MachineName or Message are NULL.</exception>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSDiagnosticsEntry.SiteId">
      <summary>
            Site Guid
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSDiagnosticsEntry.StateInfo">
      <summary>
            (Only if EntryType = Trace) State information within the Module (like locals dump)
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSDiagnosticsEntry.Timestamp">
      <summary>
            Timestamp of entry
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSDiagnosticsEntry.UserId">
      <summary>
            User Guid
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSFarm">
      <summary>
            CSFarm is the top-most level item in the primary Corkscrew object hierarchy. All other constructs are treated as 
            members or sub-constructs of the CSFarm object. A farm may contain a collection of files and directories, but these are actually 
            transparently hosted under the "Configuration" or "ConfigDB" CSSite.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFarm.AllAdministrators">
      <summary>
            Get all Farm admins. Will not contain system users. 
            For Farm Admins, it will return all admins, otherwise will return empty list!
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFarm.AllConfiguration">
      <summary>
            Collection of configuration values. Writable to Farm Admins.
            NOTE: Configuration is always global and not specific to a particular site. 
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFarm.AllContentTypes">
      <summary>
            Collection of registered Content Types (MIME types). Writable to Farm Admins.
            NOTE: This is always global and not specific to a particular site. 
            Key = File Extension, Value = Content type MIME name
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFarm.AllSites">
      <summary>
            All the sites in this farm. Writable only to Farm Admin users.
            Note, only the sites that the user (used in Open[]) has access to will be returned!
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFarm.AllUserGroups">
      <summary>
            Gets all the user groups in the farm.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFarm.AllUsers">
      <summary>
            Get all users in the farm. Will not include built-in users.
            For Farm Admins, it will return all users, otherwise will return only authenticated user!
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFarm.AllWorkflowAssociations">
      <summary>
            Collection of workflows associated at the farm level.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFarm.AllWorkflowDefinitions">
      <summary>
            Collection of workflows defined in this farm
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFarm.AuthenticatedUser">
      <summary>
            Returns the user account used to instantiate this site object.
            This should *never* be null because there is no way to get a CSFarm without this being set!
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFarm.ConfigDatabaseServerName">
      <summary>
            Name of the server hosting this farm's ConfigDB
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFarm.CreateSite(System.String,System.String,System.String,System.Int64)">
      <summary>
            Create a new Site in the farm
            </summary>
      <param name="name">Name of the Site</param>
      <param name="description">Optional description for the Site</param>
      <param name="databaseName">Optional name of the site database</param>
      <param name="quota">Quota for the site. Set to 0 to disable quota.</param>
      <returns>Instance of the newly created Site (already persisted), or NULL if the persistence failed at the backend</returns>
      <exception cref="T:System.UnauthorizedAccessException">Thrown if user is not a Farm Administrator</exception>
      <exception cref="T:System.ArgumentException">If there is already another site by the same "name" or if another site is already using the same "databaseName" (other than if the database 
            is the Farm ConfigDB database</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if there are issues in deployment of the new site's content database</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFarm.CreateUser(System.String,System.String,System.String,System.String)">
      <summary>
            Create a new user in the farm
            </summary>
      <param name="username">Username for user. Cannot be a reserved system name</param>
      <param name="displayName">Display or friendly name</param>
      <param name="password">Plain-text Password (cannot be empty or null). Do not set an already encrypted password here.</param>
      <param name="emailAddress">Email address for the user. This is optional, but without an email address the user may not be able to participate in some operations (like Workflows).</param>
      <returns>The newly created user</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFarm.DefaultSite">
      <summary>
            Returns the default site (Config Site)
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFarm.Dispose">
      <summary>
            Dispose the object
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFarm.Dispose(System.Boolean)">
      <summary>
            Dispose the farm
            </summary>
      <param name="disposing">Set to true to dispose</param>
    </member>
    <member name="F:Corkscrew.SDK.objects.CSFarm.disposedValue">
      <summary>
            If true, indicates object has been disposed already.
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.objects.CSFarm.FARM_DATABASENAME">
      <summary>
            Name of the farm database (hardcoded to Corkscrew_ConfigDB). Provides a way for client code to 
            get the name in a reliable fashion.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFarm.FullPath">
      <summary>
            Returns the full path to this Farm
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFarm.Id">
      <summary>
            Returns the farm Id. 
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFarm.IsAuthenticatedUserFarmAdministrator">
      <summary>
            Returns if the AuthenticatedUser is a farm administrator
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFarm.IsWorkflowEnabled">
      <summary>
            Returns if workflows are enabled for the farm
            </summary>
      <returns>True if workflows are enabled, false if not.</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFarm.Open(Corkscrew.SDK.security.CSUser)">
      <summary>
            Open a connection to the farm
            </summary>
      <param name="user">User to connect to the farm</param>
      <returns>CSFarm instance (if authenticated). Otherwise relevant exceptions will be thrown.</returns>
      <exception cref="T:System.ArgumentNullException">If user is NULL</exception>
      <exception cref="T:System.UnauthorizedAccessException">If the user cannot login successfully or does not have access to the farm.</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFarm.Open(System.String,System.String)">
      <summary>
            Open a connection to the farm
            </summary>
      <param name="username">Username to connect to the farm</param>
      <param name="passwordHash">SHA256 hash of the password for the credential (use Utility.GetSHA256Hash() to get)</param>
      <returns>CSFarm instance (if authenticated). Otherwise relevant exceptions will be thrown.</returns>
      <exception cref="T:System.UnauthorizedAccessException">If the combination of username and password do not login successfully or does not grant access to the farm.</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFarm.Resolve(System.String)">
      <summary>
            Returns the scope of what the uri is pointing to
            </summary>
      <param name="corkscrewUri">Corkscrew resource Uri to resolve and try to identify</param>
      <returns>The type of object the Uri is pointing to. If the Uri is invalid, will return ScopeEnum.Invalid</returns>
      <exception cref="T:System.ArgumentNullException">If the parameter is NULL</exception>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFarm.RootDirectory">
      <summary>
            Returns the root directory of the Configuration site.
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSFileSystemEntry">
      <summary>
            This is a base class. Represents a single file or directory item in the Corkscrew filesystem. Most of the useful functionality is only accessible from within 
            an implementing object (CSFileSystemEntryFile and CSFileSystemEntryDirectory).
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntry.AuthenticatedUser">
      <summary>
            Returns the authenticated user credential using which this 
            item was created or opened.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntry.CopyTo(System.String,System.Boolean)">
      <summary>
            Copy the current entry to the given destination.
            </summary>
      <param name="destination">Destination directory path. Do NOT append current item's name to this path!</param>
      <param name="overwrite">If set, will overwrite current copy at destination if already exists</param>
      <exception cref="T:System.ArgumentNullException">If "destination" is null.</exception>
      <exception cref="T:System.IO.IOException">Thrown in multiple scenarios: [1] Object is invalid. [2] Destination is not a folder. [3] Item already exists. 
            [4] Destination already contains an item of the same name, but that is of a different type (folder/file). [5] Persisting the copy failed.</exception>
      <exception cref="T:System.UnauthorizedAccessException">User does not have Contribute access to the destination location.</exception>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntry.Created">
      <summary>
            Gets the date/time of creation
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntry.CreatedBy">
      <summary>
            Gets the user who created the entry.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntry.Delete">
      <summary>
            Deletes the current entry. Also deletes any associated ACLs. Authenticated user needs to have FullControl access, and 
            object (delete-locked) or its higher-hierarchy should not be change-locked.
            </summary>
      <returns>True if delete was successful</returns>
      <exception cref="T:System.IO.IOException">If the entry is not valid</exception>
      <exception cref="T:System.UnauthorizedAccessException">If the user does not have permissions to delete the object</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntry.Dispose">
      <summary>
            Dispose the object
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntry.Dispose(System.Boolean)">
      <summary>
            Dispose the object
            </summary>
      <param name="disposing">True if disposing</param>
    </member>
    <member name="F:Corkscrew.SDK.objects.CSFileSystemEntry.disposedValue">
      <summary>
            If true, indicates object has been disposed already.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntry.Exists(Corkscrew.SDK.objects.CSSite,System.String)">
      <summary>
            Validates if an entry already exists at the given path
            </summary>
      <param name="site">The Site to search in</param>
      <param name="fullpath">Full path to the target item</param>
      <returns>True if there is something at fullpath. False if not.</returns>
      <exception cref="T:System.ArgumentNullException">If site or fullpath are NULL</exception>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntry.Farm">
      <summary>
            Gets reference to the Farm
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntry.Filename">
      <summary>
            Get/set filename
            </summary>
      <exception cref="T:System.IO.IOException">Setter may throw if value contains a "/"</exception>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntry.FilenameExtension">
      <summary>
            Get/set filename extension
            </summary>
      <exception cref="T:System.IO.IOException">Setter may throw if value contains a "/"</exception>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntry.FilenameWithExtension">
      <summary>
            Returns the filename with extension. 
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntry.FullPath">
      <summary>
            Get full site-rooted path to this item
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntry.GetChildren(System.Func{Corkscrew.SDK.objects.CSFileSystemEntry,System.Boolean},System.Boolean,System.Boolean)">
      <summary>
            If the current entry is a folder, enumerates files and/or folders that are children of this item.
            </summary>
      <param name="filters">Filters to apply on the retrieved collection. Filters are applied after they are retrieved.</param>
      <param name="getFiles">If set, returns files</param>
      <param name="getFolders">If set, returns folders</param>
      <returns>Collection of CSFileSystemEntry with filters applied</returns>
      <exception cref="T:System.IO.IOException">If current item is not a folder.</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntry.GetFileItemInfo(Corkscrew.SDK.objects.CSSite,System.String)">
      <summary>
            Gets the entry information for an existing file given the virtual path. 
            </summary>
      <param name="site">CSSite in context</param>
      <param name="path">The virtual path to the resource</param>
      <returns>Opened instance of the resource. Will be NULL if resource could not be found or resource is not a file.</returns>
      <exception cref="T:System.ArgumentNullException">If site or path are NULL</exception>
      <exception cref="T:System.ArgumentException">If path is not a valid path, or site and the path Uri do not point to the same site.</exception>
      <exception cref="T:System.InvalidOperationException">If site is not populated with AuthenticatedUser information</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntry.GetFileNameWithExtension(System.String,System.String)">
      <summary>
            Returns the filename with extension
            </summary>
      <param name="name">Filename</param>
      <param name="extension">Filename extension</param>
      <returns>Correctly dotted filename with extension</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntry.GetFolderItemInfo(Corkscrew.SDK.objects.CSSite,System.String)">
      <summary>
            Gets the entry information for an existing folder given the virtual path.
            </summary>
      <param name="site">CSSite in context</param>
      <param name="path">The virtual path to the resource</param>
      <returns>Opened instance of the resource. Will be NULL if resource could not be foundor resource is not a folder.</returns>
      <exception cref="T:System.ArgumentNullException">If site or path are NULL</exception>
      <exception cref="T:System.ArgumentException">If path is not a valid path, or site and the path Uri do not point to the same site.</exception>
      <exception cref="T:System.InvalidOperationException">If site is not populated with AuthenticatedUser information</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntry.GetFullPath(System.String,System.String,System.String)">
      <summary>
            Returns the full path
            </summary>
      <param name="directory">Directory</param>
      <param name="name">Filename</param>
      <param name="extension">Filename extension</param>
      <returns>Correctly formed path. Will end with a "/" if the entry is a folder.</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntry.GetHistory(Corkscrew.SDK.objects.CSSite,System.Guid)">
      <summary>
            Returns a single history record
            </summary>
      <param name="site">The site to fetch the history for</param>
      <param name="id">Guid of the history record</param>
      <returns>The history record</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntry.GetItemInfo(Corkscrew.SDK.objects.CSSite,System.String)">
      <summary>
            Gets the info for an existing file or folder given the virtual path.
            </summary>
      <param name="site">CSSite in context</param>
      <param name="path">The virtual path to the resource</param>
      <returns>Opened instance of the resource. Will be NULL if resource could not be found.</returns>
      <exception cref="T:System.ArgumentNullException">If site or path are NULL</exception>
      <exception cref="T:System.ArgumentException">If path is not a valid path, or site and the path Uri do not point to the same site.</exception>
      <exception cref="T:System.InvalidOperationException">If site is not populated with AuthenticatedUser information</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntry.GetPermissions">
      <summary>
            Returns a list of permissions set for this filesystem entry
            </summary>
      <returns>Collection of CSPermission</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntry.History">
      <summary>
            Returns all the change history for this filesystem entry
            </summary>
      <returns>A readonly list of site change records</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntry.Id">
      <summary>
            Guid of the entry
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntry.IsArchive">
      <summary>
            Get/set if item is archive ready. Not used by Corkscrew system.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntry.IsFolder">
      <summary>
            Gets if is a folder. Cannot be changed.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntry.IsHidden">
      <summary>
            Get/set if is a hidden item. Hidden items are not rendered to UI, 
            but can be accessed programmatically.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntry.IsReadonly">
      <summary>
            Get/set if item is readonly. Content of readonly files cannot be changed.
            If is a directory, no new files can be added or removed. 
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntry.IsRootDirectoryEntry">
      <summary>
            Returns if this is the RootDirectory entry
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntry.IsSystem">
      <summary>
            Gets if is a system item. Cannot be set through business layer. 
            Can only be modified by Features during (un)installation.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntry.IsValid">
      <summary>
            Tests if the current object has been populated correctly
            </summary>
      <returns>True if object passes validation rules</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntry.ItemLocation">
      <summary>
            Location of the filesystem item. This can be either ConfigDB or SiteDB.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntry.LastAccessed">
      <summary>
            Gets the date/time of last access. 
            Will always be equal to current time.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntry.LastAccessedBy">
      <summary>
            Gets the user who last accessed the entry.
            Will typically be equal to current user.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntry.Modified">
      <summary>
            Gets the date/time of last modification
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntry.ModifiedBy">
      <summary>
            Gets the user who last modified the entry
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntry.MoveTo(System.String,System.Boolean)">
      <summary>
            Move the current entry to the given location.
            </summary>
      <param name="destination">Destination parent directory path. Do NOT append current item's name to this path!</param>
      <param name="overwrite">If set, will overwrite current copy at destination if already exists</param>
      <returns>The moved object</returns>
      <exception cref="T:System.ArgumentNullException">If "destination" is null.</exception>
      <exception cref="T:System.IO.IOException">Thrown in multiple scenarios: [1] Object is invalid. [2] Destination is not a folder. [3] Item already exists. 
            [4] Destination already contains an item of the same name, but that is of a different type (folder/file). [5] Persisting the copy failed.</exception>
      <exception cref="T:System.UnauthorizedAccessException">User does not have Contribute access to the destination location.</exception>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntry.ParentDirectory">
      <summary>
            Reference to the Directory containing this entry
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntry.ParentDirectoryPath">
      <summary>
            Get/set full site-rooted path to the parent directory
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntry.Rename(System.String,System.String)">
      <summary>
            Renames the current entry
            </summary>
      <param name="name">The new filename</param>
      <param name="extension">The new filename extension</param>
      <exception cref="T:System.ArgumentNullException">If name and extension are both nulls or empty</exception>
      <exception cref="T:System.IO.IOException">If entry is not valid or does not exist, or the rename fails on the backend.</exception>
      <exception cref="T:System.UnauthorizedAccessException">If the user does not have FullControl permissions on the object.</exception>
    </member>
    <member name="F:Corkscrew.SDK.objects.CSFileSystemEntry.ROOT_DIRECTORY_PATH">
      <summary>
            The path string for the "root" folder in the filesystem.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntry.RootDirectory">
      <summary>
            Returns the root directory of the Site
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntry.Save(System.Boolean)">
      <summary>
            Saves the current instance. Authenticated user needs to have Contribute access, and object or its higher-hierarchy should not be change-locked.
            </summary>
      <param name="setModified">If set, the Modified and ModifiedBy will be updated. Otherwise the values are not changed by this method instance. Set to FALSE 
            if these are being set before this method is called.</param>
      <returns>True if save was successful</returns>
      <exception cref="T:System.IO.IOException">If the entry is not valid</exception>
      <exception cref="T:System.UnauthorizedAccessException">If the user does not have permissions to modify the object</exception>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntry.Site">
      <summary>
            Reference to the CSSite this entry belongs to
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSFileSystemEntryCollection">
      <summary>
            Collection of CSFileSystemEntry objects
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryCollection.#ctor(Corkscrew.SDK.objects.CSSite,System.Collections.Generic.IEnumerable{Corkscrew.SDK.objects.CSFileSystemEntry},System.Boolean)">
      <summary>
            Constructor. Populates from provided enumeration.
            </summary>
      <param name="site">CSSite the entries belong to</param>
      <param name="entries">Enumeration of CSFileSystemEntry objects</param>
      <param name="isReadonly">If set, collection is marked as readonly. No elements may be added or removed after constructor call.</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryCollection.#ctor(Corkscrew.SDK.objects.CSSite,System.String,System.Boolean)">
      <summary>
            Constructor. Populates from the backend using provided Site and path.
            </summary>
      <param name="site">CSSite the entries belong to</param>
      <param name="path">Path to load entries from</param>
      <param name="isReadonly">If set, collection is marked as readonly. No elements may be added or removed after constructor call.</param>
      <exception cref="T:System.IO.IOException">If no resource is found for the path.</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryCollection.#ctor(System.Boolean)">
      <summary>
            Constructor. Site is set to NULL.
            </summary>
      <param name="isReadonly">If set, collection is marked as readonly. No elements may be added or removed after constructor call.</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryCollection.Add(Corkscrew.SDK.objects.CSFileSystemEntry)">
      <summary>
            Add a new entry
            </summary>
      <param name="entry">CSFileSystemEntry to add</param>
      <returns>The added entry</returns>
      <exception cref="T:System.IO.IOException">Thrown if: [1] Parent directory of entry is empty, [2] Entry does not belong to the same path as previously added items, 
            [3] Entry is not valid, [4] Entry does not belong to previously encountered Site</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryCollection.Add(Corkscrew.SDK.objects.FilesystemEntryTypeEnum,Corkscrew.SDK.objects.CSFileSystemEntryDirectory,System.String,System.String)">
      <summary>
            Create a new file or directory. Created stamp is set to current time, CreatedBy is set to authenticated user information.
            </summary>
      <param name="type">Type of item to add (File or Directory)</param>
      <param name="parentFolder">Parent folder to create file in</param>
      <param name="name">Filename</param>
      <param name="extension">Filename extension</param>
      <returns>The created entry</returns>
      <exception cref="T:Corkscrew.SDK.exceptions.IsReadonlyException">If base collection is readonly</exception>
      <exception cref="T:System.ArgumentNullException">If parentFolder, name or extension are empty</exception>
      <exception cref="T:System.ArgumentException">If parentFolder is invalid or is not a folder</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If createdAt is in the future or an empty date</exception>
      <exception cref="T:System.UnauthorizedAccessException">If user does not hold Contribute access to the parentFolder</exception>
      <exception cref="T:System.IO.IOException">If the item cannot be persisted or type is "Unknown"</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryCollection.Add(Corkscrew.SDK.objects.FilesystemEntryTypeEnum,Corkscrew.SDK.objects.CSFileSystemEntryDirectory,System.String,System.String,System.DateTime,Corkscrew.SDK.security.CSUser)">
      <summary>
            Create a new file or directory
            </summary>
      <param name="type">Type of item to add (File or Directory)</param>
      <param name="parentFolder">Parent folder to create file in</param>
      <param name="name">Filename</param>
      <param name="extension">Filename extension</param>
      <param name="createdAt">Date and time created at</param>
      <param name="createdBy">User creating the item</param>
      <returns>The created entry</returns>
      <exception cref="T:Corkscrew.SDK.exceptions.IsReadonlyException">If base collection is readonly</exception>
      <exception cref="T:System.ArgumentNullException">If name or extension are empty</exception>
      <exception cref="T:System.ArgumentException">If parentFolder is invalid or is not a folder</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If createdAt is in the future or an empty date</exception>
      <exception cref="T:System.UnauthorizedAccessException">If user does not hold Contribute access to the parentFolder</exception>
      <exception cref="T:System.IO.IOException">If the item cannot be persisted or type is "Unknown"</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryCollection.Find(System.String)">
      <summary>
            Find a file or directory with the given name
            </summary>
      <param name="nameWithExtension">The name of the file or directory (including any extension)</param>
      <returns>The found item or NULL</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntryCollection.FolderName">
      <summary>
            The folder all the items in this collection belong to.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntryCollection.FolderSizeBytes">
      <summary>
            The current size in bytes of the contents of this folder. 
            This is retrieved afresh every get.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryCollection.Remove(Corkscrew.SDK.objects.CSFileSystemEntry)">
      <summary>
            Deletes the entry and then removes it from the collection
            </summary>
      <param name="entry">CSFileSystemEntry to remove</param>
      <exception cref="T:System.IO.IOException">If entry could not be deleted.</exception>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntryCollection.Site">
      <summary>
            Reference back to the site
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSFileSystemEntryDirectory">
      <summary>
            Represents a directory type entry in the Corkscrew filesystem, derives from CSFileSystemEntry class.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryDirectory.#ctor(Corkscrew.SDK.objects.CSFileSystemEntry,System.Boolean)">
      <summary>
            Constructor. Import a CSFileSystemEntry as a Directory (import will fail if it is not a valid folder)
            </summary>
      <param name="entry">The FilesystemEntry to import</param>
      <param name="useNewGuid">If set, then a new Guid is assigned to the cloned item</param>
      <exception cref="T:System.InvalidCastException">If entry is null, not valid or is not a folder</exception>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntryDirectory.AllWorkflows">
      <summary>
            Collection of workflows at the directory level.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryDirectory.CreateDirectory(System.String)">
      <summary>
            Create a directory entry. Entry is created directly under the current instance. 
            If a directory by that name already exists, that instance will be returned (without throwing an error).
            </summary>
      <param name="name">Name of the directory entry to create.</param>
      <returns>The newly created directory</returns>
      <exception cref="T:System.ArgumentNullException">If name is NULL or empty</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryDirectory.CreateDirectoryTree(System.String,System.Boolean)">
      <summary>
            Creates the entire directory structure provided in the path. 
            All elements of the path are created as sub-directories to the current instance. 
            Eg: /foo/bar/etc will create /foo, /foo/bar and /foo/bar/etc folders.
            </summary>
      <param name="path">Virtual path (eg: /foo/bar/etc) to be created.</param>
      <param name="skipLock">If set, does not take a lock on the parent directory (must be set only if the caller performs locking)</param>
      <returns>Reference to the inner-most directory created.</returns>
      <exception cref="T:System.IO.IOException">Thrown if: [1] path is not valid, [2] path is not a child of the current folder</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryDirectory.CreateFile(System.String,System.String)">
      <summary>
            Create a file entry. Entry is created directly under the current instance.
            If a file by that name already exists, that instance will be returned (without throwing an error).
            </summary>
      <param name="name">Name of the file entry to create.</param>
      <param name="extension">The filename extension of the file entry to create.</param>
      <returns>The newly created file</returns>
      <exception cref="T:System.ArgumentNullException">If both name and extension are null or empty</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryDirectory.CreateFile(System.String,System.String,System.Byte[])">
      <summary>
            Create a file entry. Entry is created directly under the current instance.
            If a file by that name already exists, that instance will be returned (without throwing an error).
            </summary>
      <param name="name">Name of the file entry to create.</param>
      <param name="extension">The filename extension of the file entry to create.</param>
      <param name="data">Data for the file</param>
      <returns>The newly created file</returns>
      <exception cref="T:System.ArgumentNullException">If both name and extension are null or empty, or the data is empty.</exception>
      <exception cref="T:System.IO.IOException">If the file could not be persisted</exception>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntryDirectory.Directories">
      <summary>
            Gets an enumerable collection of child directories under this directory
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntryDirectory.Files">
      <summary>
            Gets an enumerable collection of child Files under this directory
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryDirectory.Find(System.String,System.Boolean,System.Func{Corkscrew.SDK.objects.CSFileSystemEntry,System.Boolean})">
      <summary>
            Find the given file or folder, optionally recursively
            </summary>
      <param name="name">Name of the file or folder (including extension) to search for. You can set this to empty or null string to return all entries.</param>
      <param name="recursive">If true, recurse through sub folders</param>
      <param name="filters">A Linq predicate of filters to apply. Will be applied to determined search results</param>
      <returns>All matching entries or null</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntryDirectory.FolderSizeBytes">
      <summary>
            The current size in bytes of the contents of this folder
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryDirectory.GetInfo(Corkscrew.SDK.objects.CSSite,System.String)">
      <summary>
            Gets the entry information for the given path to a directory. May return NULL or throw a FileNotFoundException.
            </summary>
      <param name="site">CSSite to open the path from</param>
      <param name="virtualPath">The virtual fully rooted path to open</param>
      <returns>Instance of the directory.</returns>
      <exception cref="T:System.ArgumentNullException">If site or path are NULL</exception>
      <exception cref="T:System.ArgumentException">If path is not a valid path, or site and the path Uri do not point to the same site.</exception>
      <exception cref="T:System.InvalidOperationException">If site is not populated with AuthenticatedUser information</exception>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntryDirectory.Items">
      <summary>
            Gets an enumerable collection of child entries (files and directories) under this directory
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSFileSystemEntryDirectoryCollection">
      <summary>
            Collection of CSFileSystemEntryDirectory
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryDirectoryCollection.#ctor(Corkscrew.SDK.objects.CSSite,System.Collections.Generic.IEnumerable{Corkscrew.SDK.objects.CSFileSystemEntryDirectory},System.Boolean)">
      <summary>
            Constructor. Populate from enumeration of entries
            </summary>
      <param name="site">CSSite the entries belong to</param>
      <param name="directories">Enumeration of CSFileSystemEntryDirectory to populate from</param>
      <param name="isReadonly">If set, creates a readonly collection</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryDirectoryCollection.#ctor(System.Boolean)">
      <summary>
            Constructor, note that Site is not set in this constructor!
            </summary>
      <param name="isReadonly">If set, creates it as a readonly collection</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryDirectoryCollection.Add(Corkscrew.SDK.objects.CSFileSystemEntryDirectory)">
      <summary>
            Adds a directory to the collection.
            </summary>
      <param name="directory">Directory to add</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryDirectoryCollection.Add(Corkscrew.SDK.objects.CSFileSystemEntryDirectory,System.String,System.String)">
      <summary>
            Create a new directory. Created stamp is set to current time, CreatedBy is set to authenticated user information.
            </summary>
      <param name="parentFolder">Parent folder to create directory in</param>
      <param name="name">Filename</param>
      <param name="extension">Filename extension</param>
      <returns>The created entry</returns>
      <exception cref="T:Corkscrew.SDK.exceptions.IsReadonlyException">If base collection is readonly</exception>
      <exception cref="T:System.ArgumentNullException">If name or extension are empty</exception>
      <exception cref="T:System.ArgumentException">If parentFolder is invalid or is not a folder</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If createdAt is in the future or an empty date</exception>
      <exception cref="T:System.UnauthorizedAccessException">If user does not hold Contribute access to the parentFolder</exception>
      <exception cref="T:System.IO.IOException">If the item cannot be persisted or type is "Unknown"</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryDirectoryCollection.Add(Corkscrew.SDK.objects.CSFileSystemEntryDirectory,System.String,System.String,System.DateTime,Corkscrew.SDK.security.CSUser)">
      <summary>
            Create a new directory
            </summary>
      <param name="parentFolder">Parent folder to create directory in</param>
      <param name="name">Filename</param>
      <param name="extension">Filename extension</param>
      <param name="createdAt">Date and time created at</param>
      <param name="createdBy">User creating the item</param>
      <returns>The created entry</returns>
      <exception cref="T:Corkscrew.SDK.exceptions.IsReadonlyException">If base collection is readonly</exception>
      <exception cref="T:System.ArgumentNullException">If name or extension are empty</exception>
      <exception cref="T:System.ArgumentException">If parentFolder is invalid or is not a folder</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If createdAt is in the future or an empty date</exception>
      <exception cref="T:System.UnauthorizedAccessException">If user does not hold Contribute access to the parentFolder</exception>
      <exception cref="T:System.IO.IOException">If the item cannot be persisted or type is "Unknown"</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryDirectoryCollection.CreateFromBaseCollection(Corkscrew.SDK.objects.CSSite,System.Collections.Generic.IEnumerable{Corkscrew.SDK.objects.CSFileSystemEntry})">
      <summary>
            Creates a CSFileSystemEntryDirectory collection from an enumeration of CSFileSystemEntry objects
            </summary>
      <param name="site">The site this collection belongs to</param>
      <param name="collection">Enumeration of CSFileSystemEntry objects</param>
      <returns>CSFileSystemEntryDirectoryCollection</returns>
      <exception cref="T:System.ArgumentNullException">If collection is null</exception>
      <exception cref="T:System.ArgumentException">If entries in the collection do not belong to the same site</exception>
      <exception cref="T:System.InvalidCastException">If an entry in the collection is not a directory</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryDirectoryCollection.Find(System.String)">
      <summary>
            Find a directory with the given name
            </summary>
      <param name="nameWithExtension">The name of the directory (including any extension)</param>
      <returns>The found directory or NULL</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryDirectoryCollection.Remove(Corkscrew.SDK.objects.CSFileSystemEntryDirectory)">
      <summary>
            Deletes the directory from the backend and removes it from the collection.
            </summary>
      <param name="directory">Directory to remove.</param>
      <exception cref="T:System.IO.IOException">If the deletion failed</exception>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSFileSystemEntryFile">
      <summary>
            Represents a file type entry in the Corkscrew filesystem, derives from CSFileSystemEntry class.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryFile.#ctor(Corkscrew.SDK.objects.CSFileSystemEntry,System.Boolean)">
      <summary>
            Creates a CSFileSystemEntryFile from a CSFileSystemEntry
            </summary>
      <param name="entry">CSFileSystemEntry to create from</param>
      <param name="useNewGuid">If set, then a new Guid is assigned to the cloned item</param>
      <exception cref="T:System.InvalidCastException">If entry is null, not valid or is not a file</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryFile.Close">
      <summary>
            Closes the stream pointer returned by Open()
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryFile.Dispose(System.Boolean)">
      <summary>
            Dispose the underlying Stream object if it was opened.
            </summary>
      <param name="disposing">True if disposing</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryFile.Flush">
      <summary>
            Flushes file stream to backend
            </summary>
      <exception cref="T:System.IO.IOException">If the stream is not opened or the stream cannot be written to</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryFile.GetInfo(Corkscrew.SDK.objects.CSSite,System.String)">
      <summary>
            Gets the entry information for the given path to a file. May return NULL or throw a FileNotFoundException.
            </summary>
      <param name="site">CSSite to open the path from</param>
      <param name="virtualPath">The virtual fully rooted path to open</param>
      <returns>Instance of the file.</returns>
      <exception cref="T:System.ArgumentNullException">If site or path are NULL</exception>
      <exception cref="T:System.ArgumentException">If path is not a valid path, or site and the path Uri do not point to the same site.</exception>
      <exception cref="T:System.InvalidOperationException">If site is not populated with AuthenticatedUser information</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryFile.GetStream">
      <summary>
            Returns the internal file stream
            </summary>
      <returns>System.IO.Stream object.</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntryFile.MimeType">
      <summary>
            The MIME type for this file. 
            This is not stored with the file and is looked up seperately in ConfigDB -&gt; MIMETypes
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryFile.Open(System.IO.FileAccess)">
      <summary>
            Open the file and returns a stream pointer to it. 
            This function should be used only for cases where a Stream is required. There is no dependency with 
            Read() and Write() calls.
            </summary>
      <param name="access">The desired access to the file (read, write or read/write)</param>
      <returns>True if the file stream was opened successfully</returns>
      <exception cref="T:System.IO.IOException">File is not valid or opened with a different lockType</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryFile.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads the information from the file's stream and assigns it to the buffer. 
            Open() must have been already called with Read or ReadWrite and an appropriate lock if applicable.
            </summary>
      <param name="buffer">[Output] byte array. Data read from underlying file stream is written to this buffer.</param>
      <param name="offset">offset into the stream to read starting from</param>
      <param name="count">Length of data to read from the data stream</param>
      <returns>Number of bytes actually read</returns>
      <exception cref="T:System.IO.IOException">If the stream is not opened</exception>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntryFile.Size">
      <summary>
            Size of the file in bytes. 
            Note: Currently the maximum possible size is 2GB within Corkscrew.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemEntryFile.SizeHuman">
      <summary>
            Returns the human-readable form of the Size (eg: "36 KB")
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryFile.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Writes the byte array's contents into the file stream. 
            Open() must have been already called with Write or ReadWrite and an appropriate lock if applicable. 
            WARNING: If buffer is set to null or empty, the file's content may end up being wiped!
            </summary>
      <param name="buffer">Byte array of content to write. Maximum length of array should be 2GB.</param>
      <param name="offset">offset into the stream to write starting from</param>
      <param name="count">Length of data to write from the data stream</param>
      <exception cref="T:System.IO.IOException">If the stream is not opened</exception>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSFileSystemEntryFileCollection">
      <summary>
            Collection of CSFileSystemEntryFile
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryFileCollection.#ctor(Corkscrew.SDK.objects.CSSite,System.Collections.Generic.List{Corkscrew.SDK.objects.CSFileSystemEntryFile},System.Boolean)">
      <summary>
            Constructor. Populates from enumeration of CSFileSystemEntryFile objects
            </summary>
      <param name="site">CSSite the entries belong to</param>
      <param name="files">Enumeration of CSFileSystemEntryFile objects</param>
      <param name="isReadonly">If set, creates readonly collection</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryFileCollection.#ctor(System.Boolean)">
      <summary>
            Constructor, site is set to NULL
            </summary>
      <param name="isReadonly">If set, creates readonly collection</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryFileCollection.Add(Corkscrew.SDK.objects.CSFileSystemEntryDirectory,System.String,System.String)">
      <summary>
            Create a new file. Created stamp is set to current time, CreatedBy is set to authenticated user information.
            </summary>
      <param name="parentFolder">Parent folder to create file in</param>
      <param name="name">Filename</param>
      <param name="extension">Filename extension</param>
      <returns>The created entry</returns>
      <exception cref="T:Corkscrew.SDK.exceptions.IsReadonlyException">If base collection is readonly</exception>
      <exception cref="T:System.ArgumentNullException">If name or extension are empty</exception>
      <exception cref="T:System.ArgumentException">If parentFolder is invalid or is not a folder</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If createdAt is in the future or an empty date</exception>
      <exception cref="T:System.UnauthorizedAccessException">If user does not hold Contribute access to the parentFolder</exception>
      <exception cref="T:System.IO.IOException">If the item cannot be persisted or type is "Unknown"</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryFileCollection.Add(Corkscrew.SDK.objects.CSFileSystemEntryDirectory,System.String,System.String,System.DateTime,Corkscrew.SDK.security.CSUser)">
      <summary>
            Create a new file
            </summary>
      <param name="parentFolder">Parent folder to create file in</param>
      <param name="name">Filename</param>
      <param name="extension">Filename extension</param>
      <param name="createdAt">Date and time created at</param>
      <param name="createdBy">User creating the item</param>
      <returns>The created entry</returns>
      <exception cref="T:Corkscrew.SDK.exceptions.IsReadonlyException">If base collection is readonly</exception>
      <exception cref="T:System.ArgumentNullException">If name or extension are empty</exception>
      <exception cref="T:System.ArgumentException">If parentFolder is invalid or is not a folder</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If createdAt is in the future or an empty date</exception>
      <exception cref="T:System.UnauthorizedAccessException">If user does not hold Contribute access to the parentFolder</exception>
      <exception cref="T:System.IO.IOException">If the item cannot be persisted or type is "Unknown"</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryFileCollection.Add(Corkscrew.SDK.objects.CSFileSystemEntryFile)">
      <summary>
            Add the given CSFileSystemEntry to the collection.
            </summary>
      <param name="file">CSFileSystemEntry to add</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryFileCollection.CreateFromBaseCollection(Corkscrew.SDK.objects.CSSite,System.Collections.Generic.IEnumerable{Corkscrew.SDK.objects.CSFileSystemEntry})">
      <summary>
            Creates a CSFileSystemEntryFileCollection from enumeration of CSFileSystemEntry objects
            </summary>
      <param name="site">The site this collection belongs to</param>
      <param name="collection">Enumeration of CSFileSystemEntry objects</param>
      <returns>CSFileSystemEntryCollection</returns>
      <exception cref="T:System.ArgumentException">If entries in the collection do not belong to the same site</exception>
      <exception cref="T:System.ArgumentNullException">If collection is null</exception>
      <exception cref="T:System.InvalidOperationException">If an entry is not populated with Site</exception>
      <exception cref="T:System.InvalidCastException">If an entry is a folder</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryFileCollection.Find(System.String)">
      <summary>
            Find a file with the given name
            </summary>
      <param name="nameWithExtension">The name of the file (including any extension)</param>
      <returns>The found file or NULL</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemEntryFileCollection.Remove(Corkscrew.SDK.objects.CSFileSystemEntryFile)">
      <summary>
            Deletes the file from the backend and removes it from the collection.
            </summary>
      <param name="file">CSFileSystemEntryFile to remove</param>
      <exception cref="T:System.IO.IOException">If the deletion failed</exception>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSFileSystemHistoryRecord">
      <summary>
            Represents a single historical record of a CSFileSystemEntry. The data in this class cannot be modified, 
            hence it does not contain any methods.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSFileSystemHistoryRecord.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Corkscrew.SDK.objects.CSFileSystemHistoryRecord</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemHistoryRecord.ChangedBy">
      <summary>
            User who made the change
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemHistoryRecord.ChangeTimestamp">
      <summary>
            Date and time of the change
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemHistoryRecord.ChangeType">
      <summary>
            Type of change record
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemHistoryRecord.Created">
      <summary>
            Gets the date/time of creation
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemHistoryRecord.CreatedBy">
      <summary>
            Gets the user who created the entry.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemHistoryRecord.Filename">
      <summary>
            Get/set filename
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemHistoryRecord.FilenameExtension">
      <summary>
            Get/set filename extension
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemHistoryRecord.FilenameWithExtension">
      <summary>
            Returns the filename with extension. 
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemHistoryRecord.FileSystemEntry">
      <summary>
            The current instance of the filesystem entry it represents. 
            Will be NULL if item has been deleted.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemHistoryRecord.FullPath">
      <summary>
            Get full site-rooted path to this item
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemHistoryRecord.Id">
      <summary>
            Guid of the historical record
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemHistoryRecord.IsArchive">
      <summary>
            Get/set if item is archive ready. Not used by Corkscrew system.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemHistoryRecord.IsFolder">
      <summary>
            Gets if is a folder. Cannot be changed.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemHistoryRecord.IsHidden">
      <summary>
            Get/set if is a hidden item. Hidden items are not rendered to UI, 
            but can be accessed programmatically.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemHistoryRecord.IsReadonly">
      <summary>
            Get/set if item is readonly. Content of readonly files cannot be changed.
            If is a directory, no new files can be added or removed. 
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemHistoryRecord.IsSystem">
      <summary>
            Gets if is a system item. Cannot be set through business layer. 
            Can only be modified by Features during (un)installation.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemHistoryRecord.LastAccessed">
      <summary>
            Gets the date/time of last access. 
            Will always be equal to current time.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemHistoryRecord.LastAccessedBy">
      <summary>
            Gets the user who last accessed the entry.
            Will typically be equal to current user.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemHistoryRecord.Modified">
      <summary>
            Gets the date/time of last modification
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemHistoryRecord.ModifiedBy">
      <summary>
            Gets the user who last modified the entry
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemHistoryRecord.ParentDirectoryPath">
      <summary>
            Get/set full site-rooted path to the parent directory
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemHistoryRecord.PreviousData">
      <summary>
            Previous data stream. Only valid for files.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSFileSystemHistoryRecord.PreviousDataSize">
      <summary>
            Size in bytes of the previous data stream. Only valid for files.
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSKeyValuePair">
      <summary>
            Our own implementation of a KeyValuePair,
            since the .NET KeyValuePair is a struct and a Tuple is too verbose. 
            This is used from our CSConfigurationCollection class.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSKeyValuePair.#ctor">
      <summary>
            Constructor (initializes key and value to NULL)
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSKeyValuePair.#ctor(System.String,System.String)">
      <summary>
            Constructor
            </summary>
      <param name="key">Key</param>
      <param name="value">Value</param>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSKeyValuePair.Key">
      <summary>
            Key or name of the pair
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSKeyValuePair.ToString">
      <summary>
            ToString() implementation
            </summary>
      <returns>Returns the value as "Key = Value"</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSKeyValuePair.Value">
      <summary>
            Value of the pair
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSMailItem">
      <summary>
            Represents a single email object. This is primarily used by the automated system to create and send emails. 
            Can be used by workflows and other components that require email capabilities.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSMailItem.ContentHtml">
      <summary>
            Mail body content
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSMailItem.From">
      <summary>
            Sender of email (max length of 255, must be only email address)
            </summary>
      <exception cref="T:System.ArgumentException">If mail address is not in right format</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSMailItem.GetById(System.Guid)">
      <summary>
            Gets a specific mail item by its Id
            </summary>
      <param name="id">Guid of the mailitem to retrieve</param>
      <returns>The retrieved mail item or NULL</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSMailItem.GetUnsentMail(System.Int32)">
      <summary>
            Gets the unsent mail queue
            </summary>
      <param name="count">Number of emails to retrieve. NOTE: We retrieve this list using the "WITH TIES" option. Therefore, return may be more than 25 items!</param>
      <returns>Readonly list of mail items or empty list</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSMailItem.Id">
      <summary>
            Id of this mail item
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSMailItem.InternalCopyTo">
      <summary>
            CC recipient (max length of 255, must be only email address, only 1 address expected)
            </summary>
      <exception cref="T:System.ArgumentException">If mail address is not in right format</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSMailItem.QueueMail(Corkscrew.SDK.security.CSUser,System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Place a mail item in the queue
            </summary>
      <param name="queueUser">User account creating the queued item</param>
      <param name="from">Sender email address</param>
      <param name="recipient">Recipient email address</param>
      <param name="subject">Mail subject</param>
      <param name="contentHtml">Mail content body</param>
      <param name="copyTo">Carbon copy (CC) email address</param>
      <returns>The queued mail item</returns>
      <exception cref="T:System.ArgumentNullException">If any of the parameters (except copyTo) are null</exception>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSMailItem.Recipient">
      <summary>
            Mail recipient (max length of 255, must be only email address, only 1 address expected)
            </summary>
      <exception cref="T:System.ArgumentException">If mail address is not in right format</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSMailItem.Send">
      <summary>
            Attempts to send the email.
            NOTE: This is an asynchronous call. We queue the call with the .NET Smtp Client and we will not know the result for about 
            30 seconds after that.
            </summary>
      <exception cref="T:System.Exception">Thrown if current instance of mail was already sent, or the mail send attempt failed.</exception>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSMailItem.Subject">
      <summary>
            Mail subject
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSMailItem.WasSent">
      <summary>
            Returns if the mail was sent. If "false", means it is still in queue.
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSMIMEType">
      <summary>
            Defines a map between a file extension and a MIME/content Type
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.objects.CSMIMEType.DEFAULT_MIME_TYPE">
      <summary>
            The default MIME type string
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSMIMEType.Delete">
      <summary>
            Deletes the current instance of CSContentType
            </summary>
      <returns>True if deleted</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSMIMEType.FileExtension">
      <summary>
            Filename Extension
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSMIMEType.KnownMimeType">
      <summary>
            MIME type as known for this file type
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSMIMEType.Save">
      <summary>
            Saves the the current instance of CSContentType. 
            Check value of return to determine success.
            </summary>
      <returns>True if save was successful. Typical reason for failure is if file extension is already mapped to another MIME type.</returns>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSMIMETypeCollection">
      <summary>
            Collection of CSMIMEType
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSMIMETypeCollection.#ctor(Corkscrew.SDK.objects.CSFarm)">
      <summary>
            Constructor, populates all the MIME types in the farm. Writable to Farm admins
            </summary>
      <param name="farm">Farm</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSMIMETypeCollection.#ctor(Corkscrew.SDK.objects.CSFarm,System.Collections.Generic.List{Corkscrew.SDK.objects.CSMIMEType},System.Boolean)">
      <summary>
            Constructor, populates the given list of MIME types. Writable to Farm admins or by flag
            </summary>
      <param name="farm">Farm</param>
      <param name="types">List of content types</param>
      <param name="isReadonly">Set for readonly</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSMIMETypeCollection.#ctor(Corkscrew.SDK.objects.CSFarm,System.String)">
      <summary>
            Constructor, always creates a readonly list. Populates MIME mappings matching the partial MIME name provided.
            </summary>
      <param name="farm">Farm</param>
      <param name="partialName">Partial MIME name</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSMIMETypeCollection.Add(System.String,System.String)">
      <summary>
            Add a new content type
            </summary>
      <param name="extension">Filename extension</param>
      <param name="mime">MIME type or content type name matching the extension</param>
      <exception cref="T:System.UnauthorizedAccessException">If the authenticated user is not a Farm admin</exception>
      <exception cref="T:System.ArgumentException">If the extension is already mapped to another type</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSMIMETypeCollection.Find(System.String)">
      <summary>
            Find a content type given its filename extension
            </summary>
      <param name="filenameExtension">Filename Extension</param>
      <returns>CSContentType if found. Else NULL</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSMIMETypeCollection.Remove(Corkscrew.SDK.objects.CSMIMEType)">
      <summary>
            Remove the given content type
            </summary>
      <param name="type">The content type to remove</param>
      <exception cref="T:System.UnauthorizedAccessException">If the authenticated user is not a Farm admin</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSMIMETypeCollection.Remove(System.String)">
      <summary>
            Remove the content type for the given filename extension
            </summary>
      <param name="filenameExtension">Filename extension</param>
      <exception cref="T:System.UnauthorizedAccessException">If the authenticated user is not a Farm admin</exception>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSPath">
      <summary>
            This is not a persisted class. Provides functionality similar to System.IO.Path class, 
            but for our CMS file system.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSPath.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Corkscrew.SDK.objects.CSPath</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSPath.AltDirectorySeparatorChar">
      <summary>
            For compatibility, returns same as DirectorySeparatorChar
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSPath.CmsPathPrefix">
      <summary>
            The path prefix for Cms filesystem objects
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSPath.Combine(System.String[])">
      <summary>
            Combine the pieces given into a full path
            </summary>
      <param name="pieces">Pieces of a path to combine</param>
      <returns>Fully combined path string</returns>
      <exception cref="T:System.ArgumentException">If any piece is not well-formed</exception>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSPath.DirectorySeparatorChar">
      <summary>
            Returns character used to separate items in the folder structure
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSPath.GetDirectoryName(System.String)">
      <summary>
            Get the directory name of the given path
            </summary>
      <param name="path">The path to get the directory name for</param>
      <returns>The directory name. String.Empty if path is not valid.</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSPath.GetFullPath(Corkscrew.SDK.objects.CSSite,System.String)">
      <summary>
            Constructs the full path to the resource
            </summary>
      <param name="site">Site</param>
      <param name="path">Path</param>
      <returns>Rooted Url</returns>
      <exception cref="T:System.ArgumentException">If any piece is not well-formed</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSPath.GetPathInfo(System.String)">
      <summary>
            Split the given path into the Site's Guid and the resource Url
            </summary>
      <param name="path">CMS resource path</param>
      <returns>PATH_INFO with the information.</returns>
      <exception cref="T:System.ArgumentException">If the path is not a well-formed Corkscrew Uri</exception>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSPath.InvalidFilenameCharacters">
      <summary>
            Characters that should not be present in file names
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSPath.InvalidTrailingCharacters">
      <summary>
            Characters that should not be present at the end of file or path names. 
            (Includes set from InvalidFilenameCharacters)
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSPath.IsPathRooted(System.String)">
      <summary>
            Returns if the path starts with a root-marker
            </summary>
      <param name="path">The path to check</param>
      <returns>True if path starts with either '/' or 'corkscrew://'</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSPath.IsValidUri(System.String)">
      <summary>
            Returns if the given Corkscrew resource Uri is a valid Uri
            </summary>
      <param name="corkscrewResourceUri">CMS Resource Uri</param>
      <returns>True if valid</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSPath.PathSeparator">
      <summary>
            For compatibility, returns same as DirectorySeparatorChar
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSSite">
      <summary>
            A CSSite (Corkscrew Site) is a collection element under the CSFarm object (that is, the CSFarm is the parent of the CSSite). The CSSite hosts 
            the CMS filesystem and provides the collection of files and directories.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.AllConfiguration">
      <summary>
            Collection of all the configuration information. This call is the same as Farm.AllConfiguration
            NOTE: Configuration is always global and not specific to a particular site. Feature 
            configuration is not accessed through this method.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.AllContentTypes">
      <summary>
            Collection of all the configured content types. This call is the same as Farm.AllContentTypes
            NOTE: This is always global and not specific to a particular site. 
            Key = File Extension, Value = Content type MIME name
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.AllSiteAdministrators">
      <summary>
            Gets a collection of all administrators for this Site. Will also include Farm admins, since they are also site admins.
            For Farm Admins, it will return all admins. For non-administrator users, will return empty list.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.AllUsers">
      <summary>
            Gets a collection of all the users in the Farm. Will also include global, anonymous and other grants.
            For Farm Admins, it will return all users, otherwise will return only authenticated user. 
            This call is the same as Farm.AllUsers
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.AllWorkflowAssociations">
      <summary>
            Collection of workflows associated to this site.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.AuthenticatedUser">
      <summary>
            Returns the user account used to instantiate this site object.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.Columns">
      <summary>
            Table column definitions defined at this site
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.ContentDatabaseName">
      <summary>
            Get  the name of the SiteDB database for this Site. If no explicit name has been set, 
            it will default to the farm database name. 
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.ContentDatabaseServerName">
      <summary>
            Get the name of the server hosting the content database. 
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.Created">
      <summary>
            Date and time of creation. 
            Set by constructor.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.CreatedBy">
      <summary>
            User who created.
            Set by constructor.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.Description">
      <summary>
            Description of the site
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSite.Dispose">
      <summary>
            Dispose the object
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSite.Dispose(System.Boolean)">
      <summary>
            Dispose the object
            </summary>
      <param name="disposing">True if disposing</param>
    </member>
    <member name="F:Corkscrew.SDK.objects.CSSite.disposedValue">
      <summary>
            If true, indicates object has been disposed already.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.DNSNames">
      <summary>
            Manage DNS name mappings for this Site.
            Cannot manage DNS names for ConfigDB site.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSite.Exists(System.Guid)">
      <summary>
            Check if a site exists with given Id. 
            </summary>
      <param name="id">id of the site</param>
      <returns>True if site exists, false if not</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSite.Exists(System.String)">
      <summary>
            Check if a site exists with given name. 
            </summary>
      <param name="name">Name of the site</param>
      <returns>True if site exists, false if not</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.Farm">
      <summary>
            Reference to the parent farm
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.FullPath">
      <summary>
            Gets the Corkscrew Uri to the site
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSite.GetDirectory(System.Guid)">
      <summary>
            Get a directory given its Guid
            </summary>
      <param name="id">Guid of directory</param>
      <returns>Directory or null</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSite.GetDirectory(System.String)">
      <summary>
            Get a directory given its Corkscrew Resource Uri
            </summary>
      <param name="path">Corkscrew Resource Uri to the directory</param>
      <returns>Directory or null</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSite.GetFile(System.Guid)">
      <summary>
            Get a file given its Guid
            </summary>
      <param name="id">Guid of file</param>
      <returns>File or null</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSite.GetFile(System.String)">
      <summary>
            Get a file given its Corkscrew Resource Uri
            </summary>
      <param name="path">Corkscrew Resource Uri to the file</param>
      <returns>File or null</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSite.GetFileSystemItem(System.Guid)">
      <summary>
            Get a generic filesystem item given its Guid
            </summary>
      <param name="id">Guid of item</param>
      <returns>Filesystem item or null</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSite.GetFileSystemItem(System.String)">
      <summary>
            Get a generic filesystem item given its Corkscrew Resource Uri
            </summary>
      <param name="path">Corkscrew Resource Uri to the item</param>
      <returns>Item or null</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSite.GetHistory(System.Int64)">
      <summary>
            Returns a single history record
            </summary>
      <param name="id">Id of the history record</param>
      <returns>The history record</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.History">
      <summary>
            Returns all the change history for this site
            </summary>
      <returns>A readonly list of site change records</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.Id">
      <summary>
            Unique Id of the site
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.IsAuthenticatedUserFarmAdministrator">
      <summary>
            Returns if the authenticated user is a farm administrator
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.IsAuthenticatedUserSiteAdministrator">
      <summary>
            Returns if the authenticated user is a Site administrator
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.IsConfigSite">
      <summary>
            Returns if the site is the Config site
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.IsSiteOtherThanConfigSite">
      <summary>
            Returns if the site is other than the Config site
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSite.IsValidSite(Corkscrew.SDK.objects.CSSite)">
      <summary>
            Validates that the given site actually exists.
            </summary>
      <param name="site">Site to validate</param>
      <returns>Always true for Guid.Empty, otherwise existence based on site.Id</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.Modified">
      <summary>
            Date and time of modification. 
            Set internally or by persistence.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.ModifiedBy">
      <summary>
            User who modified. 
            Set internally or by persistence.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.Name">
      <summary>
            User friendly name of the site
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.QuotaBytes">
      <summary>
            Set the site quota, in bytes. A value of zero disables quota.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.RootFolder">
      <summary>
            Gets the root folder for the site
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSite.Save">
      <summary>
            Save the site instance
            </summary>
      <returns>True if successful</returns>
      <exception cref="T:System.UnauthorizedAccessException">If the authenticated user is not a site or farm administrator</exception>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSite.Tables">
      <summary>
            Gets a collection of all tables in the site
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSSiteCollection">
      <summary>
            Collection of CSSites. Allows management of sites in the farm.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSiteCollection.#ctor(Corkscrew.SDK.objects.CSFarm,System.Boolean)">
      <summary>
            Constructor, loads all the sites in the farm.
            </summary>
      <param name="farm">The farm the collection belongs to</param>
      <param name="isReadonly">If set, creates a readonly collection</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSiteCollection.#ctor(Corkscrew.SDK.objects.CSFarm,System.Collections.Generic.IEnumerable{Corkscrew.SDK.objects.CSSite},System.Boolean)">
      <summary>
            Constructor, loads the provided sites collection. 
            </summary>
      <param name="farm">The farm the collection belong to</param>
      <param name="sites">Enumeration of CSSites to populate from</param>
      <param name="isReadonly">If set, creates a readonly collection</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSiteCollection.Add(Corkscrew.SDK.objects.CSSite)">
      <summary>
            Add the given site to the collection. 
            </summary>
      <param name="site">CSSite to add</param>
      <returns>The same site (for consistency with other overloads)</returns>
      <exception cref="T:Corkscrew.SDK.exceptions.IsReadonlyException">If collection is readonly</exception>
      <exception cref="T:System.ArgumentException">If the site was already added or belongs to a different farm</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSiteCollection.Add(System.String,Corkscrew.SDK.security.CSUser,System.String,System.String,System.Int64)">
      <summary>
            Create a new Site in the farm and adds it to the collection
            </summary>
      <param name="name">Name of the Site</param>
      <param name="user">User creating the Site</param>
      <param name="description">Optional description for the Site</param>
      <param name="databaseName">Optional name of the site database</param>
      <param name="quota">Quota for the site. Set to 0 to disable (negative values will be adjusted to 0).</param>
      <returns>Instance of the newly created Site (already persisted)</returns>
      <exception cref="T:Corkscrew.SDK.exceptions.IsReadonlyException">If collection is readonly</exception>
      <exception cref="T:System.UnauthorizedAccessException">If user is not a Farm administrator</exception>
      <exception cref="T:System.ArgumentException">If another site of the same name already exists</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSiteCollection.Find(System.Guid)">
      <summary>
            Find the CSSite with the given Id
            </summary>
      <param name="id">Guid of the Site to find in the collection</param>
      <returns>CSSite instance matching Guid. NULL if not found.</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSiteCollection.Find(System.String)">
      <summary>
            Find the CSSite by its name
            </summary>
      <param name="name">Name of the site to find</param>
      <returns>CSSite instance matching name. NULL if not found.</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSiteCollection.FindByDnsName(System.String)">
      <summary>
            Find the CSSite given its DNS name
            </summary>
      <param name="dnsName">DNS name of the site to find</param>
      <returns>CSSite instance matching the dnsName. NULL if not found</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSiteCollection.Remove(Corkscrew.SDK.objects.CSSite)">
      <summary>
            Remove a CSSite from the collection. Will also delete the site from Corkscrew system.
            </summary>
      <param name="site">CSSite to delete</param>
      <exception cref="T:Corkscrew.SDK.exceptions.IsReadonlyException">If the collection is readonly</exception>
      <exception cref="T:System.ArgumentException">If no site with the given Id could be found</exception>
      <exception cref="T:System.UnauthorizedAccessException">If the authenticated user is not a Farm administrator</exception>
      <exception cref="T:System.Exception">If there was a backend failure preventing the site deletion</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSiteCollection.Remove(System.Guid)">
      <summary>
            Remove a CSSite from the collection. Will also delete the site from Corkscrew system.
            </summary>
      <param name="id">Guid of the CSSite to delete</param>
      <exception cref="T:Corkscrew.SDK.exceptions.IsReadonlyException">If the collection is readonly</exception>
      <exception cref="T:System.ArgumentException">If no site with the given Id could be found</exception>
      <exception cref="T:System.UnauthorizedAccessException">If the authenticated user is not a Farm administrator</exception>
      <exception cref="T:System.Exception">If there was a backend failure preventing the site deletion</exception>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSSiteDNSNamesCollection">
      <summary>
            Collection of DNS names for a CSSite
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSiteDNSNamesCollection.#ctor(Corkscrew.SDK.objects.CSSite)">
      <summary>
            Constructor
            </summary>
      <param name="site">CSSite for which DNS names are being managed</param>
      <exception cref="T:System.ArgumentException">If site is NULL or is the Config site</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSiteDNSNamesCollection.Add(System.String)">
      <summary>
            Add a new DNS name
            </summary>
      <param name="name">DNS name to add</param>
      <exception cref="T:Corkscrew.SDK.exceptions.IsReadonlyException">If collection is readonly</exception>
      <exception cref="T:System.UnauthorizedAccessException">If the authenticated user is not a Farm administrator</exception>
      <exception cref="T:System.ArgumentNullException">If the name is empty</exception>
      <exception cref="T:System.Exception">If the DNS name could not be added.</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSiteDNSNamesCollection.Remove(System.String)">
      <summary>
            Remove a name
            </summary>
      <param name="name">DNS name to remove</param>
      <exception cref="T:Corkscrew.SDK.exceptions.IsReadonlyException">If collection is readonly</exception>
      <exception cref="T:System.UnauthorizedAccessException">If the authenticated user is not a Farm administrator</exception>
      <exception cref="T:System.ArgumentNullException">If the name is empty</exception>
      <exception cref="T:System.Exception">If the DNS name could not be removed.</exception>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSiteDNSNamesCollection.ToString">
      <summary>
            Returns a string with comma-seperated list of Dns names
            </summary>
      <returns>String with comma-seperated list of Dns names. If no names are present, returns empty string</returns>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSSiteHistoryRecord">
      <summary>
            Represents a single historical record of a CSSite. The data in this class cannot be modified, 
            hence it does not contain any methods.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSSiteHistoryRecord.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Corkscrew.SDK.objects.CSSiteHistoryRecord</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSiteHistoryRecord.ChangedBy">
      <summary>
            User who changed.
            Set by constructor.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSiteHistoryRecord.ChangeTimestamp">
      <summary>
            Date and time of the change. 
            Set by constructor.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSiteHistoryRecord.ChangeType">
      <summary>
            Type of change this record represents.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSiteHistoryRecord.ContentDatabaseName">
      <summary>
            Get/Set the name of the SiteDB database for this Site. If no explicit name has been set, 
            this is calculated from the Id.
            To reset the name to default name, simply set the value to NULL.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSiteHistoryRecord.ContentDatabaseServerName">
      <summary>
            Get/Set the name of the server hosting the content database. 
            ConfigDB site will have NULL here.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSiteHistoryRecord.Description">
      <summary>
            Description of the site
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSiteHistoryRecord.Id">
      <summary>
            Unique Id of the history record
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSiteHistoryRecord.Name">
      <summary>
            User friendly name of the site
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSiteHistoryRecord.PreviousModified">
      <summary>
            Date and time of modification. 
            Set internally or by persistence.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSiteHistoryRecord.PreviousModifiedBy">
      <summary>
            User who modified. 
            Set internally or by persistence.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSiteHistoryRecord.QuotaBytes">
      <summary>
            Set the site quota, in bytes. A value of zero disables quota.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSSiteHistoryRecord.Site">
      <summary>
            The current instance of the site this object represents. 
            If the site has been deleted, this would be null.
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSTable">
      <summary>
            Defines a table structure in Corkscrew. Tables are stores for row/column data just like a database table. 
            In fact, in the background, the class is persisted as an actual database table. 
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTable.#ctor(Corkscrew.SDK.objects.CSSite,System.String,System.String,System.String)">
      <summary>
            Create a new Table
            </summary>
      <param name="site">Site the table belongs to</param>
      <param name="name">Name of the table</param>
      <param name="displayName">Display name of the table (only used by UIs)</param>
      <param name="description">Description of the table (only used by UIs)</param>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTable.Columns">
      <summary>
            Table columns
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTable.CopyTo(Corkscrew.SDK.objects.CSSite)">
      <summary>
            Copies the table definition to another site.
            </summary>
      <param name="site">Site to copy the table definition to</param>
      <returns>The table at the target site or NULL</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTable.CopyTo(Corkscrew.SDK.objects.CSTable)">
      <summary>
            Copies the table structure and data to the given table. 
            </summary>
      <param name="table">Table to copy to</param>
      <returns>The table at the target site or NULL</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTable.Created">
      <summary>
            Date and time of creation. 
            Set by constructor.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTable.CreatedBy">
      <summary>
            User who created.
            Set by constructor.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTable.Description">
      <summary>
            A description of this table
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTable.Drop">
      <summary>
            Drops the table definition. All associated column information and row-data will be dropped as well.
            </summary>
      <returns>True if table was dropped successfully.</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTable.FriendlyName">
      <summary>
            Friendly name of the table. This name is only used by any UIs where the table name is used.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTable.FullPath">
      <summary>
            Corkscrew Uri to the table
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTable.Id">
      <summary>
            Guid of the table
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTable.InternalName">
      <summary>
            Internal name of the table. Sites share the same database in the backend. When two sites define tables of the 
            same name, it will cause name collision in the database. To prevent this, we generate a name that combines the 
            Name with the Site's Guid and use it as a unique name. This allows each site to define a name that is unique to it, 
            and multiple sites to generate a table of the same name. 
            
            NOTE: This name is only used when accessing the database-backed structure. Everywhere else, "Name" means the Name property.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTable.Modified">
      <summary>
            Date and time of modification. 
            Set internally or by persistence.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTable.ModifiedBy">
      <summary>
            User who modified. 
            Set internally or by persistence.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTable.Name">
      <summary>
            Name of the table. Must follow SQL table naming rules.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTable.RefreshColumns">
      <summary>
            Clear cached columns and force reload from backend
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTable.RefreshRows">
      <summary>
            Clear cached rows and force reload from backend
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTable.Rows">
      <summary>
            Rows in this table
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTable.Site">
      <summary>
            The Site this table belongs to. Farm level tables are homed in the default site.
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSTableCollection">
      <summary>
            Collection of tables
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableCollection.#ctor(Corkscrew.SDK.objects.CSSite)">
      <summary>
            Retrieves all the tables defined in the site
            </summary>
      <param name="site">Site to set context and retrieve tables for</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableCollection.Add(Corkscrew.SDK.objects.CSTable)">
      <summary>
            Adds the given table to the collection
            </summary>
      <param name="table">Table to add to collection. Must belong to same site context as the collection.</param>
      <returns>Added table</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableCollection.Add(System.String,System.String,System.String)">
      <summary>
            Create a new table and adds it to the collection
            </summary>
      <param name="name">Name of the table</param>
      <param name="displayName">Display name of the table (only used by UIs)</param>
      <param name="description">Description of the table (only used by UIs)</param>
      <returns>Added table</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableCollection.Item(System.Guid)">
      <summary>
            Returns the table with the given Id if present in the collection
            </summary>
      <param name="id">Guid of the table</param>
      <returns>Table if found, or NULL</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableCollection.Item(System.String)">
      <summary>
            Returns the table with the given name if present in the collection.
            </summary>
      <param name="name">Name of the table (this is the Name property)</param>
      <returns>Table if found, or NULL</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableCollection.Remove(Corkscrew.SDK.objects.CSTable)">
      <summary>
            Drops the table and removes from the collection
            </summary>
      <param name="table">Table to drop and remove</param>
      <returns>True if table was dropped and removed</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableCollection.Remove(System.Guid)">
      <summary>
            Drops the table and removes from the collection
            </summary>
      <param name="id">Guid of the table to drop and remove</param>
      <returns>True if table was dropped and removed</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableCollection.Remove(System.String)">
      <summary>
            Drops the table and removes from the collection
            </summary>
      <param name="name">Name (Name property) of the table to drop and remove</param>
      <returns>True if table was dropped and removed</returns>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSTableColumn">
      <summary>
            Represents a single column that has been added to a table
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableColumn.#ctor(Corkscrew.SDK.objects.CSTable,Corkscrew.SDK.objects.CSTableColumnDefinition,System.String)">
      <summary>
            Add the column to the table
            </summary>
      <param name="table">Table to add column to</param>
      <param name="column">Column definition to add to table</param>
      <param name="localName">Local name of the column in the table</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableColumn.#ctor(Corkscrew.SDK.objects.CSTable,System.String,System.String,Corkscrew.SDK.objects.CSTableColumnDataTypeEnum,System.Boolean)">
      <summary>
            Create and add the column to the table
            </summary>
      <param name="table">Table to add column to</param>
      <param name="column">Column definition to add to table</param>
      <param name="localName">Local name of the column in the table</param>
      <param name="name">Name of the column</param>
      <param name="type">Data type of the column</param>
      <param name="allowNull">If set, column value can be set to NULL</param>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableColumn.Created">
      <summary>
            Date and time of creation. 
            Set by constructor.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableColumn.CreatedBy">
      <summary>
            User who created.
            Set by constructor.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableColumn.Drop">
      <summary>
            Drops the column from the table. This does not drop the column definition.
            </summary>
      <returns>True if column was dropped from the table</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableColumn.LocalName">
      <summary>
            Name of the column in the table. Must be unique to the table. Cannot be changed once assigned.
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSTableColumnCollection">
      <summary>
            Represents all the columns added to a particular table
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableColumnCollection.#ctor(Corkscrew.SDK.objects.CSTable)">
      <summary>
            Retrieves all the columns attached to teh given table
            </summary>
      <param name="table">Table to set context and retrieve columns for</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableColumnCollection.Add(Corkscrew.SDK.objects.CSTableColumn)">
      <summary>
            Add the given column to the collection
            </summary>
      <param name="column">Column to add</param>
      <returns>Added column</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableColumnCollection.Add(Corkscrew.SDK.objects.CSTableColumnDefinition,System.String)">
      <summary>
            Add the given column to the table and 
            </summary>
      <param name="column">Column to add</param>
      <param name="localName">Local name to add the column with (must be unique in table)</param>
      <returns>Returns the added table column</returns>
    </member>
    <member name="E:Corkscrew.SDK.objects.CSTableColumnCollection.ColumnAdded">
      <summary>
            Event raised when a column is added to the collection
            </summary>
    </member>
    <member name="E:Corkscrew.SDK.objects.CSTableColumnCollection.ColumnRemoved">
      <summary>
            Event raised when a column is removed from the collection
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableColumnCollection.Item(System.String)">
      <summary>
            Returns the column with the given name if present in the collection
            </summary>
      <param name="name">Name (LocalName) of the column</param>
      <returns>Column if found, or NULL</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableColumnCollection.OnColumnAdded(Corkscrew.SDK.objects.CSTableColumn)">
      <summary>
            Raises the ColumnAdded event
            </summary>
      <param name="column">Column that was added</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableColumnCollection.OnColumnRemoved(Corkscrew.SDK.objects.CSTableColumn)">
      <summary>
            Raises the ColumnRemoved event
            </summary>
      <param name="column">Column that was removed</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableColumnCollection.Remove(Corkscrew.SDK.objects.CSTableColumn)">
      <summary>
            Drops the column from the table and the colelction
            </summary>
      <param name="column">Column to drop and remove</param>
      <returns>True if column was dropped and removed</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableColumnCollection.Remove(System.String)">
      <summary>
            Drops the column and removes from the collection
            </summary>
      <param name="name">Name (LocalName property) of the column to drop and remove</param>
      <returns>True if column was dropped and removed</returns>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSTableColumnCollectionChangedEventArgs">
      <summary>
            Event arguments for the ColumnAdded and ColumnRemoved events
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableColumnCollectionChangedEventArgs.Column">
      <summary>
            The column that was added or removed
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableColumnCollectionChangedEventArgs.Reason">
      <summary>
            The type of change
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSTableColumnDataTypeEnum">
      <summary>
            Enumeration of data types allowed to be defined as a CSTabularDataColumn
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.objects.CSTableColumnDataTypeEnum.Unknown">
      <summary>
            Unknown (for a default value)
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.objects.CSTableColumnDataTypeEnum.Binary">
      <summary>
            Binary data
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.objects.CSTableColumnDataTypeEnum.Text">
      <summary>
            Textual data. Use for strings longer than 4000 characters.
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.objects.CSTableColumnDataTypeEnum.String">
      <summary>
            Short string data. Use for strings upto 400 characters long.
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.objects.CSTableColumnDataTypeEnum.Integer">
      <summary>
            Integer data. Maps to C# "long" type. Range from -9223372036854775808 to 9223372036854775807.
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.objects.CSTableColumnDataTypeEnum.FloatingPoint">
      <summary>
            Floating point data. Maps to C# "double" type. Range from -1.7976931348623157E+308 to 1.7976931348623157E+308.
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.objects.CSTableColumnDataTypeEnum.DateTime">
      <summary>
            Date and time.
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.objects.CSTableColumnDataTypeEnum.Boolean">
      <summary>
            Boolean type.
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.objects.CSTableColumnDataTypeEnum.Guid">
      <summary>
            Guid type
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSTableColumnDefinition">
      <summary>
            Defines a column for a Corkscrew Table. This is only the definition and will not contain any data. 
            Column definitions are created at Site scope. These must then be added to one or more tables to make use of them. 
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableColumnDefinition.#ctor(Corkscrew.SDK.objects.CSSite,System.String,Corkscrew.SDK.objects.CSTableColumnDataTypeEnum,System.Boolean)">
      <summary>
            Creates a new table column definition
            </summary>
      <param name="site">Site the table column belongs to</param>
      <param name="name">Name of the column</param>
      <param name="type">Data type of the column</param>
      <param name="allowNull">If set, column value can be set to NULL</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableColumnDefinition.#ctor(Corkscrew.SDK.objects.CSSite,System.String,System.Int32,System.Boolean)">
      <summary>
            Creates a new table column definition of string type
            </summary>
      <param name="site">Site the table column belongs to</param>
      <param name="name">Name of the column</param>
      <param name="maxLength">Maximum length of the string</param>
      <param name="allowNull">If set, column value can be set to NULL</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableColumnDefinition.CopyTo(Corkscrew.SDK.objects.CSSite)">
      <summary>
            Copies the column definition to another site.
            </summary>
      <param name="site">Site to copy the column definition to</param>
      <returns>The column at the target site or NULL</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableColumnDefinition.Created">
      <summary>
            Date and time of creation. 
            Set by constructor.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableColumnDefinition.CreatedBy">
      <summary>
            User who created.
            Set by constructor.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableColumnDefinition.DataType">
      <summary>
            Data type of the column. Cannot be changed once set.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableColumnDefinition.Drop">
      <summary>
            Drops the column definition. All associated column information and data in those columns in every table that uses this column will be dropped as well.
            </summary>
      <returns>True if column was dropped successfully.</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableColumnDefinition.Id">
      <summary>
            Guid of the column
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableColumnDefinition.MaximumLength">
      <summary>
            Get or set the maximum length of data in the column. 
            Note: This value is applicable only to some data types. For types that do not support a length definition, 
            this will be -1.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableColumnDefinition.Name">
      <summary>
            Name of the column. Must follow SQL column naming rules. Cannot be changed once set.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableColumnDefinition.Nullable">
      <summary>
            Get or set if the column is nullable
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableColumnDefinition.Site">
      <summary>
            The Site this column belongs to. Farm level columns are homed in the default site.
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSTableColumnDefinitionCollection">
      <summary>
            Collection of table column definitions
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableColumnDefinitionCollection.#ctor(Corkscrew.SDK.objects.CSSite)">
      <summary>
            Retrieves all the columns defined in the site
            </summary>
      <param name="site">Site to set context and retrieve columns for</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableColumnDefinitionCollection.Add(Corkscrew.SDK.objects.CSTableColumnDefinition)">
      <summary>
            Adds the given column to the collection
            </summary>
      <param name="column">Column to add to collection. Must belong to same site context as the collection.</param>
      <returns>Added column definition</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableColumnDefinitionCollection.Add(System.String,Corkscrew.SDK.objects.CSTableColumnDataTypeEnum,System.Boolean)">
      <summary>
            Creates a new table column definition and adds it to the collection
            </summary>
      <param name="name">Name of the column</param>
      <param name="type">Data type of the column</param>
      <param name="allowNull">If set, column value can be set to NULL</param>
      <returns>Added table column definition</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableColumnDefinitionCollection.Add(System.String,System.Int32,System.Boolean)">
      <summary>
            Creates a new table column definition of string type and adds it to the collection
            </summary>
      <param name="name">Name of the column</param>
      <param name="maxLength">Maximum length of the string</param>
      <param name="allowNull">If set, column value can be set to NULL</param>
      <returns>The newly added table column definition</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableColumnDefinitionCollection.Item(System.Guid)">
      <summary>
            Returns the column with the given Id if present in the collection
            </summary>
      <param name="id">Guid of the column</param>
      <returns>Column if found, or NULL</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableColumnDefinitionCollection.Item(System.String)">
      <summary>
            Returns the column with the given name if present in the collection.
            </summary>
      <param name="name">Name of the column (this is the Name property)</param>
      <returns>Column if found, or NULL</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableColumnDefinitionCollection.Remove(Corkscrew.SDK.objects.CSTableColumnDefinition)">
      <summary>
            Drops the column and removes from the collection
            </summary>
      <param name="column">Column to drop and remove</param>
      <returns>True if column was dropped and removed</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableColumnDefinitionCollection.Remove(System.Guid)">
      <summary>
            Drops the column and removes from the collection
            </summary>
      <param name="id">Guid of the column to drop and remove</param>
      <returns>True if column was dropped and removed</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableColumnDefinitionCollection.Remove(System.String)">
      <summary>
            Drops the column and removes from the collection
            </summary>
      <param name="name">Name (Name property) of the column to drop and remove</param>
      <returns>True if column was dropped and removed</returns>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSTableItemStateEnum">
      <summary>
            Enumeration of states of a table item
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.objects.CSTableItemStateEnum.UnchangedOrCommitted">
      <summary>
            Item is not changed since last update. Post committing a change, state moves to this
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.objects.CSTableItemStateEnum.Added">
      <summary>
            Item was newly added and may not be committed
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.objects.CSTableItemStateEnum.Modified">
      <summary>
            Item was modified and may not be committed
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.objects.CSTableItemStateEnum.Deleted">
      <summary>
            Item was deleted and may not be committed
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.objects.CSTableItemStateEnum.Errored">
      <summary>
            Is in an errored state
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSTableRow">
      <summary>
            Defines a row in a Corkscrew Table (CSTable).  Tables are stores for row/column data just like a database table. 
            The table row class represents one row of data in the table.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableRow.Columns">
      <summary>
            A readonly collection of the columns. Columns are retrieved from the parent table.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableRow.CommitChanges">
      <summary>
            Commit changes to the data in the row
            </summary>
      <returns>True if changes were committed. False if not.</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableRow.Delete">
      <summary>
            Delete the row from the table
            </summary>
      <returns>True if row was deleted. False if not.</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableRow.ExportRow(Corkscrew.SDK.objects.CSTable)">
      <summary>
            Export the current row to the target table. Current row remains unchanged. Storage is not modified.
            </summary>
      <param name="table">Table to export row to</param>
      <returns>Table row at target table</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableRow.FullPath">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Corkscrew.SDK.objects.CSTableRow.FullPath</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableRow.HasError">
      <summary>
            Returns if the row has any validation error
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableRow.Id">
      <summary>
            Guid of the row.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableRow.Item(Corkscrew.SDK.objects.CSTableColumn)">
      <summary>
            Get or set the value associated with the table column
            </summary>
      <param name="column">The table column</param>
      <returns>Value of the column in the row as an object. Null if column was not found.</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableRow.Item(System.String)">
      <summary>
            Get or set the value associated with the table column
            </summary>
      <param name="name">LocalName of the table column</param>
      <returns>Value of the column in the row as an object. Null if column was not found.</returns>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableRow.RowError">
      <summary>
            If HasError is set, returns the error message. Will be empty string otherwise.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableRow.RowState">
      <summary>
            State of the row
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSTableRow.Table">
      <summary>
            The parent table for this row
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSTableRowCollection">
      <summary>
            Represents all the rows added to a particular table
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableRowCollection.#ctor(Corkscrew.SDK.objects.CSTable)">
      <summary>
            Creates a new collection of table rows
            </summary>
      <param name="table">The table to create the collection object for</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableRowCollection.Add(Corkscrew.SDK.objects.CSTableRow)">
      <summary>
            Add the row to the collection. This method does not modify any data in the backend. It only modifies the collection.
            </summary>
      <param name="row">Row to add</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableRowCollection.AddRange(Corkscrew.SDK.objects.CSTableRow[])">
      <summary>
            Add the array of rows to the collection. This method does not modify any data in the backend. It only modifies the collection.
            </summary>
      <param name="range">Array of rows to add</param>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableRowCollection.Clear">
      <summary>
            Clears all the rows in the collection. This method does not modify any data in the backend. It only modifies the collection.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableRowCollection.NewRow">
      <summary>
            Generates a new row in the table.  This method does not modify any data in the backend. It does not modify the collection.
            </summary>
      <returns>Blank row with populated columns from the table</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTableRowCollection.Remove(Corkscrew.SDK.objects.CSTableRow)">
      <summary>
            Removes the row from the collection. This method does not modify any data in the backend. It only modifies the collection.
            </summary>
      <param name="row">Row to remove</param>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSTabularDataColumnDataTypeConverter">
      <summary>
            Helps converting between the column data type Enum and actual database type name
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTabularDataColumnDataTypeConverter.GetCSTypeName(System.String)">
      <summary>
            Gets the tabular column type enum value
            </summary>
      <param name="type">SQL type name</param>
      <returns>Tabular column type enum value or Unknown</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTabularDataColumnDataTypeConverter.GetDatabaseTypeName(Corkscrew.SDK.objects.CSTableColumnDataTypeEnum)">
      <summary>
            Gets the SQL type name
            </summary>
      <param name="type">Tabular column type enum value</param>
      <returns>SQL type name or NULL</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTabularDataColumnDataTypeConverter.Is(Corkscrew.SDK.objects.CSTableColumnDataTypeEnum,Corkscrew.SDK.objects.CSTableColumnDataTypeEnum)">
      <summary>
            Returns if both types are the same
            </summary>
      <param name="left">Tabular column type enum value</param>
      <param name="right">Tabular column type enum value</param>
      <returns>True if both match. If one resolves to "Unknown", returned as FALSE</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTabularDataColumnDataTypeConverter.Is(System.String,Corkscrew.SDK.objects.CSTableColumnDataTypeEnum)">
      <summary>
            Returns if both types are the same
            </summary>
      <param name="left">The SQL type name</param>
      <param name="right">Tabular column type enum value</param>
      <returns>True if both match. If one resolves to "Unknown", returned as FALSE</returns>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSTabularDataColumnDataTypeConverter.Is(System.String,System.String)">
      <summary>
            Returns if both types are the same
            </summary>
      <param name="left">SQL type name</param>
      <param name="right">SQL type name</param>
      <returns>True if both match. If one resolves to "Unknown", returned as FALSE</returns>
    </member>
    <member name="T:Corkscrew.SDK.objects.CSWorkingContext">
      <summary>
            Provides context information to different layers of Corkscrew. 
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.CSWorkingContext.#ctor(System.Guid,System.DateTime,Corkscrew.SDK.objects.CSFarm,Corkscrew.SDK.objects.CSSite,Corkscrew.SDK.objects.CSFileSystemEntry)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Corkscrew.SDK.objects.CSWorkingContext</parameter>
          </include>
        </markup>
      </summary>
      <param name="id">Guid (tracking/context) of the operation</param>
      <param name="farm">Farm that is the target of the invocation (reference to local Farm)</param>
      <param name="site">Site that is the target of the invocation</param>
      <param name="filesystemEntry">FileSystemEntry that is the target of the invocation</param>
      <param name="timestamp">Date/time of the trigger (for logging purposes)</param>
      <exception cref="T:System.ArgumentNullException">If Farm is null. This parameter cannot be null.</exception>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSWorkingContext.AuthorizationCredential">
      <summary>
            The credential used to authorize access to the Farm, Site, Filesystem entry and User
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSWorkingContext.Farm">
      <summary>
            Reference to the Farm
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSWorkingContext.FileSystemEntry">
      <summary>
            Reference to the Filesystem entry
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSWorkingContext.IsFarmContext">
      <summary>
            True if only the Farm context is set
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSWorkingContext.IsFilesystemEntryContext">
      <summary>
            True if is a FileSystemEntry context
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSWorkingContext.IsSiteContext">
      <summary>
            True if is a Site context
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSWorkingContext.OperationId">
      <summary>
            The Id of this operation
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSWorkingContext.OperationStartTimestamp">
      <summary>
            The date/time when the operation for which this context was created started.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSWorkingContext.Site">
      <summary>
            Reference to the Site
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.CSWorkingContext.TimeElapsed">
      <summary>
            Returns the time elapsed since OperationStartTimestamp in milliseconds.
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.objects.FilesystemEntryTypeEnum">
      <summary>
            Type of file system item
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.objects.FilesystemEntryTypeEnum.Unknown">
      <summary>
            Unknown type (not set)
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.objects.FilesystemEntryTypeEnum.File">
      <summary>
            File
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.objects.FilesystemEntryTypeEnum.Directory">
      <summary>
            Directory
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.objects.IWorkflowAssociable">
      <summary>
            Interface. Classes that implement this interface can be associated with a workflow
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.IWorkflowAssociable.FullPath">
      <summary>
            The class must implement a FullPath property with a public get. 
            Expected result is the Corkscrew Uri to the resource.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.IWorkflowAssociable.Id">
      <summary>
            The class must implement an Id property with a public get.
            Expected result is the Guid of the resource.
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.objects.IWorkflowInstantiable">
      <summary>
            Interface. When classes that implement this interface are created, modified or deleted; they cause workflow instances to be spawned.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.IWorkflowInstantiable.FullPath">
      <summary>
            The class must implement a FullPath property with a public get. 
            Expected result is the Corkscrew Uri to the resource.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.IWorkflowInstantiable.Id">
      <summary>
            The class must implement an Id property with a public get.
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.objects.PATH_INFO">
      <summary>
            Used to return or pass in information about paths
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.objects.PATH_INFO.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.PATH_INFO.FullPath">
      <summary>
            The full path as represented by this PATH_INFO
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.PATH_INFO.IsValid">
      <summary>
            Returns if the SiteId and ResourceUri are valid.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.PATH_INFO.ResourceURI">
      <summary>
            The resource Uri of the item in the site (contains only the directory/file path)
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.PATH_INFO.ResourceUriScope">
      <summary>
            The object that the ResourceUri path is pointing to.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.objects.PATH_INFO.SiteId">
      <summary>
            Guid of the Site in the path
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.providers.database.CSDatabaseProviderFactory">
      <summary>
            This class determines the backend provider class from the list of loaded or attached assemblies and provides the correct one based on the connection string. 
            The CSDatabaseProviderFactory class is what helps Corkscrew support multiple (database) backend engines to store its data.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.providers.database.CSDatabaseProviderFactory.Discover(System.Boolean)">
      <summary>
            Will discover what type of connections we have configured 
            and will set up the provider preference.
            </summary>
      <param name="onlyIfConnectionSucceeds">If set, also tries to establish a connection to the target of the connection string. Provider is accepted only if the connection attempt succeeds.</param>
      <exception cref="T:System.Exception">If the "configdb" connection string could not be found or was emoty or no providers were found to match it</exception>
    </member>
    <member name="M:Corkscrew.SDK.providers.database.CSDatabaseProviderFactory.GetPreferredProviderPrimaryDatabaseName">
      <summary>
            Returns the PrimaryDatabaseName property for the preferred provider. 
            This name is designed to be the name of the primary database on the database engine on that server.
            </summary>
      <returns>Name of the primary database</returns>
    </member>
    <member name="M:Corkscrew.SDK.providers.database.CSDatabaseProviderFactory.GetProvider(System.String,System.String,System.String)">
      <summary>
            Returns the appropriate provider for the given connection
            </summary>
      <param name="selector">The connection string name ("configdb" selects the configuration database connection string)</param>
      <param name="server">The server to connect to</param>
      <param name="database">Name of the database we will be connecting to (required if [selector] is not "configdb")</param>
      <returns>The database provider.</returns>
      <exception cref="T:System.InvalidOperationException">If the factory is in errored state or the preferred provider is not set</exception>
    </member>
    <member name="M:Corkscrew.SDK.providers.database.CSDatabaseProviderFactory.GetProviderByConnectionString(System.String,System.Boolean)">
      <summary>
            Returns the first database engine provider that works with the given connection string
            </summary>
      <param name="connectionString">Connection string to use</param>
      <param name="onlyIfConnectionSucceeds">If set, will first try to establish a connection. If not set, will not test connection.</param>
      <returns>Provider or NULL</returns>
    </member>
    <member name="T:Corkscrew.SDK.providers.database.CSSqlServerProvider">
      <summary>
            Class implementing the SqlServer database provider
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.providers.database.CSSqlServerProvider.#ctor">
      <summary>
            NOP constructor
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.providers.database.CSSqlServerProvider.#ctor(System.String)">
      <summary>
            Public constructor, initializes with the connection string
            </summary>
      <param name="connectionString">Connection string to initialize with</param>
    </member>
    <member name="P:Corkscrew.SDK.providers.database.CSSqlServerProvider.Connection">
      <summary>
            Provides access to the underlying connection so that the ODMs can 
            perform functions not directly supported by this provider class.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.providers.database.CSSqlServerProvider.Dispose">
      <summary>
            Dispose the provider
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.providers.database.CSSqlServerProvider.Dispose(System.Boolean)">
      <summary>
            Dispose the provider
            </summary>
      <param name="disposing">Set to true if really disposing</param>
    </member>
    <member name="M:Corkscrew.SDK.providers.database.CSSqlServerProvider.ExecuteNonQueryStatement(System.String,System.Int32)">
      <summary>
            Execute a non-query statement
            </summary>
      <param name="statement">DML statement to execute</param>
      <param name="commandTimeout">[OPTIONAL] Timeout of command. Default of 30 seconds.</param>
      <returns>DatabaseActionResult with any errors. Note that DatabaseActionResult datasets will NOT be populated</returns>
    </member>
    <member name="M:Corkscrew.SDK.providers.database.CSSqlServerProvider.ExecuteSelectStatement(System.String,System.Int32)">
      <summary>
            Execute a Sql SELECT statement and return its results
            </summary>
      <param name="selectStatement">SELECT statement to run</param>
      <param name="commandTimeout">[OPTIONAL] Timeout of command. Default of 30 seconds.</param>
      <returns>DatabaseActionResult object with the data</returns>
    </member>
    <member name="M:Corkscrew.SDK.providers.database.CSSqlServerProvider.ExecuteStoredProcedure(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32)">
      <summary>
            Execute a stored procedure and return its results
            </summary>
      <param name="procedureName">Stored procedure to run</param>
      <param name="inParameters">[OPTIONAL] Dictionary of IN parameters (keys are parameter names, values are param values)</param>
      <param name="outParameters">[OPTIONAL] Dictionary of OUT parameters. If this dictionary is NULL, then no out parameters are retrieved</param>
      <param name="commandTimeout">[OPTIONAL] Timeout of command. Default of 30 seconds.</param>
      <returns>DatabaseActionResult object with the data</returns>
      <exception cref="T:System.ArgumentException">If any of the outParameters are set to NULL (is not allowed since the ADO layer cannot guess the data type of such a parameter)</exception>
    </member>
    <member name="M:Corkscrew.SDK.providers.database.CSSqlServerProvider.GetAllDatabases(System.String)">
      <summary>
            Returns all the databases from the given connection string
            </summary>
      <param name="connectionString">Connection string</param>
      <returns>List of database names, empty list if not retrieved.</returns>
    </member>
    <member name="M:Corkscrew.SDK.providers.database.CSSqlServerProvider.GetBinaryContent(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32,System.Int32,System.Int32)">
      <summary>
            Executes a stored procedure to retrieve byte[] data
            </summary>
      <param name="procedureName">Stored procedure to run</param>
      <param name="inParameters">[OPTIONAL] Dictionary of IN parameters (keys are parameter names, values are param values)</param>
      <param name="contentLengthColumnIndex">Zero-based index of the column containing the length of the content</param>
      <param name="contentColumnIndex">Zero-based index of the column containing the content</param>
      <param name="commandTimeout">[OPTIONAL] Timeout of command. Default of 30 seconds.</param>
      <returns>Byte array or NULL</returns>
    </member>
    <member name="M:Corkscrew.SDK.providers.database.CSSqlServerProvider.GetSingleValue(System.String,System.Int32,System.String)">
      <summary>
            Get a single value output (instead of a statement). This is similar to the ExecuteScalar statement.
            </summary>
      <param name="query">Select query to run</param>
      <param name="commandTimeout">[OPTIONAL] Timeout of command. Default of 30 seconds.</param>
      <param name="onEmpty">[OPTIONAL] value to return if nothing was returned by SQL</param>
      <returns>The string equivalent of what was returned.</returns>
    </member>
    <member name="P:Corkscrew.SDK.providers.database.CSSqlServerProvider.HasError">
      <summary>
            Returns if the provider has suffered an error
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.providers.database.CSSqlServerProvider.PrimaryDatabaseName">
      <summary>
            Name of the database engine's primary database. 
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.providers.database.CSSqlServerProvider.ProviderName">
      <summary>
            Name of the database engine's type 
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.providers.database.CSSqlServerProvider.QuoteEndChar">
      <summary>
            Ending character of the literal used to quote identifiers
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.providers.database.CSSqlServerProvider.QuoteStartChar">
      <summary>
            Starting character of the literal used to quote identifiers
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.providers.database.CSSqlServerProvider.TableExists(System.String)">
      <summary>
            Returns if the given table exists
            </summary>
      <param name="tableName">Name of the table to check</param>
      <returns>True if table exists</returns>
    </member>
    <member name="M:Corkscrew.SDK.providers.database.CSSqlServerProvider.TryConnect(System.String)">
      <summary>
            Attempts to connect to the given connection string
            </summary>
      <param name="connectionString">Connection string to try</param>
      <returns>True if connection was successful.</returns>
    </member>
    <member name="T:Corkscrew.SDK.providers.database.DatabaseActionResult">
      <summary>
            [struct] Rich result from database operations
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.providers.database.DatabaseActionResult.Error">
      <summary>
            If [true], indicates an error occured
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.providers.database.DatabaseActionResult.ErrorMessage">
      <summary>
            If [Error] is [true], will contain the error message
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.providers.database.DatabaseActionResult.ModuleName">
      <summary>
            Name of the module that was executed
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.providers.database.DatabaseActionResult.OutParameters">
      <summary>
            Values of [out] parameters of called stored procedures
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.providers.database.DatabaseActionResult.ResultDataSet">
      <summary>
            Dataset returned by SELECT queries or Stored Procedures or Table-valued functions
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.providers.database.DatabaseActionResult.ReturnValue">
      <summary>
            Value returned by remote call (eg: Stored Procedure or Function return)
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.providers.database.DatabaseActionResult.RichException">
      <summary>
            The exception object if an exception was thrown
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.providers.database.ICSDatabaseProvider">
      <summary>
            Interface to be implemented by classes that wish to provide the ability to interact with a backend provider. 
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.providers.database.ICSDatabaseProvider.Connection">
      <summary>
            Provides access to the underlying connection so that the ODMs can 
            perform functions not directly supported by this provider class.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.providers.database.ICSDatabaseProvider.ExecuteNonQueryStatement(System.String,System.Int32)">
      <summary>
            Execute a non-query statement
            </summary>
      <param name="statement">DML statement to execute</param>
      <param name="commandTimeout">[OPTIONAL] Timeout of command. Default of 30 seconds.</param>
      <returns>DatabaseActionResult with any errors. Note that DatabaseActionResult datasets will NOT be populated</returns>
    </member>
    <member name="M:Corkscrew.SDK.providers.database.ICSDatabaseProvider.ExecuteSelectStatement(System.String,System.Int32)">
      <summary>
            Execute a Sql SELECT statement and return its results
            </summary>
      <param name="selectStatement">SELECT statement to run</param>
      <param name="commandTimeout">[OPTIONAL] Timeout of command. Default of 30 seconds.</param>
      <returns>DatabaseActionResult object with the data</returns>
    </member>
    <member name="M:Corkscrew.SDK.providers.database.ICSDatabaseProvider.ExecuteStoredProcedure(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32)">
      <summary>
            Execute a stored procedure and return its results
            </summary>
      <param name="procedureName">Stored procedure to run</param>
      <param name="inParameters">[OPTIONAL] Dictionary of IN parameters (keys are parameter names, values are param values)</param>
      <param name="outParameters">[OPTIONAL] Dictionary of OUT parameters. If this dictionary is NULL, then no out parameters are retrieved</param>
      <param name="commandTimeout">[OPTIONAL] Timeout of command. Default of 30 seconds.</param>
      <returns>DatabaseActionResult object with the data</returns>
    </member>
    <member name="M:Corkscrew.SDK.providers.database.ICSDatabaseProvider.GetAllDatabases(System.String)">
      <summary>
            Returns all the databases from the given connection string
            </summary>
      <param name="connectionString">Connection string</param>
      <returns>List of database names, empty list if not retrieved.</returns>
    </member>
    <member name="M:Corkscrew.SDK.providers.database.ICSDatabaseProvider.GetBinaryContent(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32,System.Int32,System.Int32)">
      <summary>
            Executes a stored procedure to retrieve byte[] data
            </summary>
      <param name="procedureName">Stored procedure to run</param>
      <param name="inParameters">[OPTIONAL] Dictionary of IN parameters (keys are parameter names, values are param values)</param>
      <param name="contentLengthColumnIndex">Zero-based index of the column containing the length of the content</param>
      <param name="contentColumnIndex">Zero-based index of the column containing the content</param>
      <param name="commandTimeout">[OPTIONAL] Timeout of command. Default of 30 seconds.</param>
      <returns>Byte array or NULL</returns>
    </member>
    <member name="M:Corkscrew.SDK.providers.database.ICSDatabaseProvider.GetSingleValue(System.String,System.Int32,System.String)">
      <summary>
            Get a single value output (instead of a statement). This is similar to the ExecuteScalar statement.
            </summary>
      <param name="query">Select query to run</param>
      <param name="commandTimeout">[OPTIONAL] Timeout of command. Default of 30 seconds.</param>
      <param name="onEmpty">[OPTIONAL] value to return if nothing was returned by SQL</param>
      <returns>The string equivalent of what was returned.</returns>
    </member>
    <member name="P:Corkscrew.SDK.providers.database.ICSDatabaseProvider.HasError">
      <summary>
            Returns if the provider has suffered an error
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.providers.database.ICSDatabaseProvider.PrimaryDatabaseName">
      <summary>
            Name of the database engine's primary database. 
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.providers.database.ICSDatabaseProvider.ProviderName">
      <summary>
            Name of the database engine's type 
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.providers.database.ICSDatabaseProvider.QuoteEndChar">
      <summary>
            Ending character of the literal used to quote identifiers
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.providers.database.ICSDatabaseProvider.QuoteStartChar">
      <summary>
            Starting character of the literal used to quote identifiers
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.providers.database.ICSDatabaseProvider.TableExists(System.String)">
      <summary>
            Returns if the given table exists
            </summary>
      <param name="tableName">Name of the table to check</param>
      <returns>True if table exists</returns>
    </member>
    <member name="M:Corkscrew.SDK.providers.database.ICSDatabaseProvider.TryConnect(System.String)">
      <summary>
            Attempts to connect to the given connection string
            </summary>
      <param name="connectionString">Connection string to try</param>
      <returns>True if connection was successful.</returns>
    </member>
    <member name="T:Corkscrew.SDK.providers.filesystem.CSDefaultPageProvider">
      <summary>
            Handles the concept of a "default" page like how IIS maps a request for "/" to "/default.aspx".
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.providers.filesystem.CSDefaultPageProvider.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.providers.filesystem.CSDefaultPageProvider.GetDefaultPageForPath(Corkscrew.SDK.objects.CSFileSystemEntry)">
      <summary>
            Calculates the "default" document for the given path
            </summary>
      <param name="path">The CSFileSystemEntry path</param>
      <returns>The default document or NULL</returns>
    </member>
    <member name="T:Corkscrew.SDK.providers.filesystem.CSFileSystemProvider">
      <summary>
            Implements VirtualPathProvider for Corkscrew File System. This class can only be used when the Corkscrew engine is hosted on a web application, 
            for example, with a website that uses Corkscrew as its filesystem.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.providers.filesystem.CSFileSystemProvider.#ctor">
      <summary>
            Constructor. 
            Initializes ApplicationRootAbsolutePath, and registers itself to the hosting environment.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.providers.filesystem.CSFileSystemProvider.DirectoryExists(System.String)">
      <summary>
            Checks if the given path corresponds to a directory. 
            </summary>
      <param name="virtualDir">The path to check</param>
      <returns>True if the location is a directory</returns>
    </member>
    <member name="M:Corkscrew.SDK.providers.filesystem.CSFileSystemProvider.FileExists(System.String)">
      <summary>
            Checks if the given path corresponds to a file. 
            </summary>
      <param name="virtualPath">The path to check</param>
      <returns>True if the location is a file</returns>
    </member>
    <member name="P:Corkscrew.SDK.providers.filesystem.CSFileSystemProvider.FileSystemEntry">
      <summary>
            Filesystem entry resolved from the request
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.providers.filesystem.CSFileSystemProvider.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)">
      <summary>
            Gets the dependency on the virtual path or one of its dependencies
            </summary>
      <param name="virtualPath">The virtual path to get dependencies for</param>
      <param name="virtualPathDependencies">Existing dependencies on the virtual path</param>
      <param name="utcStart">Start date/time for the cache</param>
      <returns>The dependency or NULL (this function will always return NULL for a Corkscrew-hosted object)</returns>
    </member>
    <member name="M:Corkscrew.SDK.providers.filesystem.CSFileSystemProvider.GetDirectory(System.String)">
      <summary>
            Gets the directory represented by the given virtual path
            </summary>
      <param name="virtualDir">The path that supposedly is a directory</param>
      <returns>VirtualDirectory instance if found, else NULL</returns>
    </member>
    <member name="M:Corkscrew.SDK.providers.filesystem.CSFileSystemProvider.GetFile(System.String)">
      <summary>
            Gets the file represented by the given virtual path
            </summary>
      <param name="virtualPath">The path that supposedly is a file</param>
      <returns>VirtualFile instance if found, else NULL</returns>
    </member>
    <member name="M:Corkscrew.SDK.providers.filesystem.CSFileSystemProvider.GetFileHash(System.String,System.Collections.IEnumerable)">
      <summary>
            Gets a hash value for the given virtual path
            </summary>
      <param name="virtualPath">Virtual path to get the hashvalue for</param>
      <param name="virtualPathDependencies">Dependencies for the virtual path</param>
      <returns>The file hash</returns>
    </member>
    <member name="P:Corkscrew.SDK.providers.filesystem.CSFileSystemProvider.IsRegistered">
      <summary>
            Gets if the provider is registered with the hosting environment
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.providers.filesystem.CSFileSystemProvider.IsValidCorkscrewItem">
      <summary>
            Returns if the requested resource is a valid Corkscrew file item
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.providers.filesystem.CSFileSystemProvider.RegisterWithHostingEnvironment">
      <summary>
            Register with the hosting environment as a virtual path provider
            </summary>
      <returns>True if the registration was successful, false if not.</returns>
    </member>
    <member name="T:Corkscrew.SDK.providers.filesystem.CSVirtualDirectory">
      <summary>
            Implementation of virtual directory provider
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.providers.filesystem.CSVirtualDirectory.#ctor(System.String,Corkscrew.SDK.providers.filesystem.CSFileSystemProvider)">
      <summary>
            Constructor
            </summary>
      <param name="virtualPath">Virtual path to the directory</param>
      <param name="driver">Reference tot he CSFileSystemProvider</param>
    </member>
    <member name="P:Corkscrew.SDK.providers.filesystem.CSVirtualDirectory.Children">
      <summary>
            Gets enumerable reference to all immediate child elements (folders and files)
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.providers.filesystem.CSVirtualDirectory.Directories">
      <summary>
            Gets enumerable reference to all immediate child folder elements
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.providers.filesystem.CSVirtualDirectory.Directory">
      <summary>
            Reference to the directory
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.providers.filesystem.CSVirtualDirectory.Files">
      <summary>
            Gets enumerable reference to all immediate child file elements
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.providers.filesystem.CSVirtualDirectory.VirtualFilesystemProvider">
      <summary>
            Reference to the Corkscrew File System driver
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.providers.filesystem.CSVirtualFile">
      <summary>
            Implementation of virtual file provider
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.providers.filesystem.CSVirtualFile.#ctor(System.String,Corkscrew.SDK.providers.filesystem.CSFileSystemProvider,Corkscrew.SDK.objects.CSFileSystemEntryFile)">
      <summary>
            Constructor
            </summary>
      <param name="virtualPath">Virtual path to the directory</param>
      <param name="driver">Reference tot he CSFileSystemProvider</param>
      <param name="file">Reference to the file being used</param>
    </member>
    <member name="P:Corkscrew.SDK.providers.filesystem.CSVirtualFile.CorkscrewFile">
      <summary>
            Returns the virtual file
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.providers.filesystem.CSVirtualFile.Open">
      <summary>
            Opens the stream for reading.
            </summary>
      <returns>Stream or NULL</returns>
    </member>
    <member name="P:Corkscrew.SDK.providers.filesystem.CSVirtualFile.VirtualFilesystemProvider">
      <summary>
            Reference to the Corkscrew File System driver
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.providers.httpmodules.CorkscrewHttpResponseModule">
      <summary>
            Handles HTTP Response modification
            We change the headers in the response data during PreSendRequestHeaders event in the pipeline. 
            We change the ASP.NET "Server" header to read our name, and modify the Content-Type header in some cases.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.providers.httpmodules.CorkscrewHttpResponseModule.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Corkscrew.SDK.providers.httpmodules.CorkscrewHttpResponseModule</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Corkscrew.SDK.providers.httpmodules.CorkscrewHttpResponseModule.Dispose">
      <summary>
            Dispose the module
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.providers.httpmodules.CorkscrewHttpResponseModule.Init(System.Web.HttpApplication)">
      <summary>
            Initialize the module
            </summary>
      <param name="context">The HttpApplication context</param>
    </member>
    <member name="T:Corkscrew.SDK.providers.httpmodules.CorkscrewMapRequestHandlerModule">
      <summary>
            This module takes care of mapping requests for static files to the IIS StaticFileHandler module.
            Without this module, this mapping will need to be taken care of in the web.config [handlers] node.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.providers.httpmodules.CorkscrewMapRequestHandlerModule.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Corkscrew.SDK.providers.httpmodules.CorkscrewMapRequestHandlerModule</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Corkscrew.SDK.providers.httpmodules.CorkscrewMapRequestHandlerModule.Dispose">
      <summary>
            Dispose the module
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.providers.httpmodules.CorkscrewMapRequestHandlerModule.Init(System.Web.HttpApplication)">
      <summary>
            Initialize the module
            </summary>
      <param name="context">The HttpApplication context</param>
    </member>
    <member name="T:Corkscrew.SDK.security.CSPermission">
      <summary>
            Denotes a generic ACL in the Corkscrew system. 
            There is no "Farm" participant. Any ACL that has Site set to NULL applies at the Farm scope.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.security.CSPermission.CanContribute">
      <summary>
            Grant of CONTRIBUTE permission
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.security.CSPermission.CanFullControl">
      <summary>
            Grant of FULL CONTROL (can do anything) permission
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.security.CSPermission.CanRead">
      <summary>
            Grant of READ permission
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.security.CSPermission.Delete">
      <summary>
            Delete the ACL
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.security.CSPermission.GetAdministrators(Corkscrew.SDK.objects.CSSite)">
      <summary>
            Gets all the administrators
            </summary>
      <param name="site">If not NULL, gets administrators for this CSSite</param>
      <returns>CSPermissionCollection populated with the relevant administrators</returns>
    </member>
    <member name="P:Corkscrew.SDK.security.CSPermission.HasAny">
      <summary>
            Returns if any permission is set to True
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.security.CSPermission.IsFarmAdministrator">
      <summary>
            Returns if the ACL denotes a Farm Administrator mapping
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.security.CSPermission.IsGroupAcl">
      <summary>
            Returns if the security principal is a user group (false if principal is a CSUser).
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.security.CSPermission.IsHierarchicalAccess">
      <summary>
            Is an indirect permission, used when the user has a finer ACL 
            for a child object with no direct ACL on top level items. 
            i.e., this is a BOTTOM-UP acl.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.security.CSPermission.IsSiteAdministrator">
      <summary>
            Returns if the ACL denotes a Site Administrator mapping
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.security.CSPermission.ResourceUri">
      <summary>
            Corkscrew Uri of the resource being protected.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.security.CSPermission.Save">
      <summary>
            Saves the ACL
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.security.CSPermission.SecurityPrincipal">
      <summary>
            User participating in this ACL
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.security.CSPermission.TestAccess(Corkscrew.SDK.objects.CSSite,Corkscrew.SDK.objects.CSFileSystemEntry,Corkscrew.SDK.security.CSSecurityPrincipal)">
      <summary>
            Entry point function, test if the combination of Site, FileSystem entry and User have any kind of access permissions
            </summary>
      <param name="site">CSSite participant</param>
      <param name="fileSystemEntry">CSFileSystemEntry participant</param>
      <param name="principal">Security principal participant</param>
      <returns>CSPermission object populated with the particular ACL</returns>
      <exception cref="T:System.ArgumentException">If site or filesystementry or user is non-NULL but invalid</exception>
    </member>
    <member name="M:Corkscrew.SDK.security.CSPermission.TestAccess(System.String,Corkscrew.SDK.security.CSSecurityPrincipal)">
      <summary>
            Test access to a Corkscrew resource
            </summary>
      <param name="resourceUri">Uri to the resource to test access for</param>
      <param name="principal">The security principal participant</param>
      <returns>The ACL permission</returns>
    </member>
    <member name="T:Corkscrew.SDK.security.CSPermissionCollection">
      <summary>
            Collection of CSPermission ACLs
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.security.CSPermissionCollection.#ctor(Corkscrew.SDK.objects.CSSite,Corkscrew.SDK.objects.CSFileSystemEntry,Corkscrew.SDK.security.CSSecurityPrincipal)">
      <summary>
            Constructor. Creates access control list for given combination of CSSite, CSFileSystemEntry and CSUser. 
            Self populates children based on ACL pulled.
            </summary>
      <param name="site">Site for ACL. Can be NULL</param>
      <param name="fileSystemEntry">FileSystemEntry for ACL. Can be NULL</param>
      <param name="principal">Security Principal for ACL. Can be NULL</param>
    </member>
    <member name="M:Corkscrew.SDK.security.CSPermissionCollection.#ctor(System.Collections.Generic.IEnumerable{Corkscrew.SDK.security.CSPermission},System.Boolean)">
      <summary>
            Constructor. Creates using given IEnumerable collection
            </summary>
      <param name="permissions">Enumeration of permissions</param>
      <param name="isReadonly">If set, creates the collection as readonly</param>
    </member>
    <member name="T:Corkscrew.SDK.security.CSSecurityPrincipal">
      <summary>
            This class is a common representation of CSUser and CSGroup for cases where one of the either is to be used.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.security.CSSecurityPrincipal.#ctor">
      <summary>
            Blank constructor used internally
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.security.CSSecurityPrincipal.DisplayName">
      <summary>
            Display name
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.security.CSSecurityPrincipal.EmailAddress">
      <summary>
            Email address of the user or group
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.security.CSSecurityPrincipal.Id">
      <summary>
            Principal Id
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.security.CSSecurityPrincipal.IsGroup">
      <summary>
            Returns if the principal is a group
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.security.CSSecurityPrincipal.LongformDisplayName">
      <summary>
            A long-format of the display name that combines the Display and User names in a 
            ["Display Name" &lt;EmailAddress&gt;] or if EmailAddress is empty, ["Display Name" &lt;Username&gt;] format.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.security.CSSecurityPrincipal.Username">
      <summary>
            Username if user, Groupname if Group
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.security.CSSecurityPrincipalCollection">
      <summary>
            Collection of security principal objects
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.security.CSSecurityPrincipalCollection.Find(System.Guid)">
      <summary>
            Find a security principal in the collection
            </summary>
      <param name="id">Guid of the principal</param>
      <returns>Principal found or NULL</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSSecurityPrincipalCollection.Find(System.String)">
      <summary>
            Find a security principal in the collection
            </summary>
      <param name="name">Username value of the security principal</param>
      <returns>Security principal found or NULL</returns>
    </member>
    <member name="P:Corkscrew.SDK.security.CSSecurityPrincipalCollection.Item(System.Guid)">
      <summary>
            Returns the principal with the given Guid if present or NULL
            </summary>
      <param name="id">Guid of the principal to fetch</param>
      <returns>CSSecurityPrincipal if found or NULL</returns>
    </member>
    <member name="P:Corkscrew.SDK.security.CSSecurityPrincipalCollection.Item(System.String)">
      <summary>
            Returns the principal with the given Username if present or NULL
            </summary>
      <param name="username">Username of the principal to fetch</param>
      <returns>CSSecurityPrincipal if found or NULL</returns>
    </member>
    <member name="T:Corkscrew.SDK.security.CSUser">
      <summary>
            This class represents a single user account in the Corkscrew system.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUser.#ctor">
      <summary>
            Blank constructor used internally
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.security.CSUser.ANONYMOUS_USER_GUID">
      <summary>
            Guid of the Anonymous user
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUser.APILogin(System.String,System.String,System.String)">
      <summary>
            This method is used by the API web service to login. Note that built-in users cannot login using this method 
            as built-in users are denied access to the API service for security reasons.
            </summary>
      <param name="username">Username of the user</param>
      <param name="passwordSHA256Hash">SHA256 hash of the user's login password</param>
      <param name="ipaddress">IP address the remote client is logging in from</param>
      <returns>A token string, will be 64 characters long. Will be NULL if login failed.</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUser.ChangePassword">
      <summary>
            Change the password for this user. A new random password is set. 
            </summary>
      <exception cref="T:System.InvalidOperationException">If this operation is attempted for a system or anonymous user</exception>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUser.ChangePassword(System.String)">
      <summary>
            Change the password for this user
            </summary>
      <param name="plainTextNewPassword">Plain text new password to set up</param>
      <exception cref="T:System.InvalidOperationException">If this operation is attempted for a system or anonymous user</exception>
    </member>
    <member name="F:Corkscrew.SDK.security.CSUser.CORKSCREW_SYSTEM_USER_GUID">
      <summary>
            Guid of the SYSTEM user
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUser.CreateAnonymousUser">
      <summary>
            Creates the system anonymous user
            </summary>
      <returns>CSUser corresponding to the CORKSCREW\Anonymous user.</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUser.CreateSystemUser">
      <summary>
            Create an instance of a Corkscrew System User
            </summary>
      <returns>A CSUser object with the system user data.</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUser.CreateUser(System.String,System.String,System.String,System.String)">
      <summary>
            Create a new user in the Corkscrew system
            </summary>
      <param name="username">Username for user. Cannot be a reserved system name</param>
      <param name="displayName">Display or friendly name</param>
      <param name="password">Plain-text Password (cannot be empty or null). We will always encrypt this, so do not set an already encrypted password here.</param>
      <param name="emailAddress">Email address for the user</param>
      <returns>The newly created user</returns>
      <exception cref="T:System.ArgumentException">If the username is already in use by an existing user account</exception>
      <exception cref="T:System.ArgumentNullException">If username, password or display name are null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If the username is one of the reserved usernames</exception>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUser.Delete">
      <summary>
            Deletes the current user
            </summary>
      <returns>True if deleted</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUser.GenerateNewPassword">
      <summary>
            Generates a new password
            </summary>
      <returns>Plain-text string password</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUser.GetById(System.Guid)">
      <summary>
            Resolve a user Guid to the user
            </summary>
      <param name="id">Guid of the user</param>
      <returns>A valid CSUser</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUser.GetByUsername(System.String)">
      <summary>
            Returns the user matching the given username
            </summary>
      <param name="userName">Username</param>
      <returns>The matching user or null</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUser.IsAnonymousUser">
      <summary>
            Returns if the user is the Anonymous user
            </summary>
      <returns>True if anonymous</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUser.IsCurrentPassword(System.String)">
      <summary>
            Returns if the given plain text password is the same as the one currently set.
            </summary>
      <param name="plainTextPassword">Plain text password to test (cannot be null or empty)</param>
      <returns>True if passwords are same.</returns>
      <exception cref="T:System.ArgumentNullException">If the plainTextPassword is null or empty</exception>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUser.IsNonOobeValidUser">
      <summary>
            Returns if the user is a valid user who is not the system or anonymous users.
            </summary>
      <returns>True if valid user</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUser.IsOobeUser">
      <summary>
            Returns if the user is the anonymous or the system user
            </summary>
      <returns>True if the user is Anonymous or System user</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUser.IsSystemUser">
      <summary>
            Returns if the user is a System user
            </summary>
      <returns>True if system user</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUser.Join(Corkscrew.SDK.security.CSUserGroup)">
      <summary>
            Join the given user group
            </summary>
      <param name="group">User group to join</param>
      <returns>True if successfully joined</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUser.Leave(Corkscrew.SDK.security.CSUserGroup)">
      <summary>
            Leave the given user group
            </summary>
      <param name="group">User group to leave</param>
      <returns>True if successfully departed from the group</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUser.Login">
      <summary>
            Attempts to login the current user object
            </summary>
      <returns>True if login was successful.</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUser.Login(System.String,System.String)">
      <summary>
            Try to login the user
            </summary>
      <param name="username">Username of the user</param>
      <param name="passwordSHA256Hash">SHA256 hash of the user's login password</param>
      <returns>CSUser if the login was successful. Else NULL.</returns>
    </member>
    <member name="P:Corkscrew.SDK.security.CSUser.Memberships">
      <summary>
            Groups this user is a member of. Elements are of type CSUserGroup. Readonly.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUser.Save">
      <summary>
            Save this instance of CSUser object
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUser.UserExists(System.String)">
      <summary>
            Returns if the given username exists in the system. 
            </summary>
      <param name="userName">Username to test</param>
      <returns>True if username exists</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUser.Validate(Corkscrew.SDK.security.CSUser)">
      <summary>
            Validates the given user
            </summary>
      <param name="user">CSUser to validate</param>
      <returns>True if user is valid</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUser.VerifyAPILogin(System.String,System.String)">
      <summary>
            Verify that the API login token and IP address are valid.
            </summary>
      <param name="token">API token granted by the APILogin call</param>
      <param name="ipaddress">IP address the remote client is logging in from</param>
      <returns>The matching CSUser if the token was validated correctly, NULL if validation failed.</returns>
    </member>
    <member name="T:Corkscrew.SDK.security.CSUserCollection">
      <summary>
            Collection of CSUser. Allows you to manage CSUser objects 
            transparently.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserCollection.#ctor(System.Collections.Generic.List{Corkscrew.SDK.security.CSUser},System.Boolean)">
      <summary>
            Creates collection of CSUser from an enumeration
            </summary>
      <param name="users">Enumeration of CSUsers</param>
      <param name="isReadonly">If set, creates a readonly collection</param>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserCollection.Add(Corkscrew.SDK.security.CSUser)">
      <summary>
            Add a CSUser to the collection. User is not "added" to the backend.
            </summary>
      <param name="user">CSUser to add</param>
      <returns>Returns the newly created user</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserCollection.Add(System.String,System.String,System.String,System.String)">
      <summary>
            Adds a new user in the Corkscrew system (adds it to the backend) and to the internal collection
            </summary>
      <param name="username">Username for user. Cannot be a reserved system name</param>
      <param name="displayName">Display or friendly name</param>
      <param name="password">Plain-text Password (cannot be empty or null). We will always encrypt this, so do not set an already encrypted password here.</param>
      <param name="emailAddress">Email address for the user</param>
      <returns>The newly created user</returns>
      <exception cref="T:System.ArgumentException">If the username is already in use by an existing user account</exception>
      <exception cref="T:System.ArgumentNullException">If username, password or display name are null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If the username is one of the reserved usernames</exception>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserCollection.Find(System.Guid)">
      <summary>
            Find the CSUser with the given Id
            </summary>
      <param name="id">Guid of the user to find in the collection</param>
      <returns>CSUser instance matching Guid. NULL if not found.</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserCollection.Find(System.String)">
      <summary>
            Find the CSUser with the given Id
            </summary>
      <param name="userName">Username of the user to find in the collection</param>
      <returns>CSUser instance matching Guid. NULL if not found.</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserCollection.GetAllUsers(Corkscrew.SDK.objects.CSFarm)">
      <summary>
            Gets a list of all users in the given farm. 
            If the user is not a Farm admin, will only return the currently authenticated user.
            </summary>
      <param name="farm">Farm to get users for</param>
      <returns>Readonly collection of users in the farm</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserCollection.GetFarmAdministrators">
      <summary>
            Gets a list of all Farm administrators
            </summary>
      <returns>Readonly collection of farm administrators</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserCollection.GetSiteAdministrators(Corkscrew.SDK.objects.CSSite)">
      <summary>
            Gets a list of all administrators of the given Site
            </summary>
      <param name="site">The site to get administrators for</param>
      <returns>Readonly collection of farm administrators</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserCollection.Remove(Corkscrew.SDK.security.CSUser)">
      <summary>
            Deletes the user from the backend and removes from collection
            </summary>
      <param name="user">CSUser to remove</param>
      <exception cref="T:System.Exception">If user could not be deleted from the backend</exception>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserCollection.Remove(System.Guid)">
      <summary>
            Deletes the user from the backend and removes from collection
            </summary>
      <param name="id">Guid of the CSUser to remove</param>
      <exception cref="T:System.Exception">If the user could not be found</exception>
    </member>
    <member name="T:Corkscrew.SDK.security.CSUserGroup">
      <summary>
            This class represents a group of users in the Corkscrew System
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserGroup.#ctor">
      <summary>
            Blank constructor used internally
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserGroup.Add(Corkscrew.SDK.security.CSUser)">
      <summary>
            Add the user to this user group. The members collection is updated if the user is successfully added.
            </summary>
      <param name="user">User to add to the group</param>
      <returns>True if added successfully</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserGroup.CreateUserGroup(System.String,System.String,System.String)">
      <summary>
            Creates a new user group
            </summary>
      <param name="username">Username or alias of the group</param>
      <param name="displayName">Display name for the group</param>
      <param name="emailAddress">Email address for the group</param>
      <returns>The newly created usergroup</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserGroup.Delete">
      <summary>
            Delete the current user group
            </summary>
      <returns>True if deleted successfully</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserGroup.Exists(System.String)">
      <summary>
            Returns if a usergroup by the given name exists
            </summary>
      <param name="name">Name of the user group to check for</param>
      <returns>True if group exists</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserGroup.GetById(System.Guid)">
      <summary>
            Fetches the user group with the given Guid
            </summary>
      <param name="id">Guid of the user group to fetch</param>
      <returns>The usergroup or NULL</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserGroup.GetByName(System.String)">
      <summary>
            Fetches the user group with the given name
            </summary>
      <param name="name">Name of the user group to fetch</param>
      <returns>The usergroup or NULL</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserGroup.GetNonMembers">
      <summary>
            Get users who are not members of this group
            </summary>
      <returns>CSUserCollection of users not in this group</returns>
    </member>
    <member name="P:Corkscrew.SDK.security.CSUserGroup.Members">
      <summary>
            Members of the group. Elements are of type CSUser. Collection is readonly.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserGroup.Remove(Corkscrew.SDK.security.CSUser)">
      <summary>
            Remove the user from this user group. The members collection is updated if the user is successfully removed.
            </summary>
      <param name="user">User to remove from the group</param>
      <returns>True if removed successfully</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserGroup.Save">
      <summary>
            Saves the current user group
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.security.CSUserGroupCollection">
      <summary>
            Collection of CSUserGroup. Allows you to manage CSUserGroup objects transparently.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserGroupCollection.#ctor(System.Collections.Generic.IEnumerable{Corkscrew.SDK.security.CSUserGroup},System.Boolean)">
      <summary>
            Creates collection of CSUserGroup from an enumeration
            </summary>
      <param name="list">Enumeration of user groups</param>
      <param name="isReadonly">If set, creates a readonly collection</param>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserGroupCollection.Add(Corkscrew.SDK.security.CSUserGroup)">
      <summary>
            Add the given group to the collection. Group is not saved to the backend.
            </summary>
      <param name="group">Group to add</param>
      <returns>Returns the added group</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserGroupCollection.Add(System.String,System.String,System.String)">
      <summary>
            Creates a new user group
            </summary>
      <param name="username">Username or alias of the group</param>
      <param name="displayName">Display name for the group</param>
      <param name="emailAddress">Email address for the group</param>
      <returns>The newly created usergroup</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserGroupCollection.Find(System.Guid)">
      <summary>
            Find the CSUserGroup with the given Id
            </summary>
      <param name="id">Guid of the user group to find in the collection</param>
      <returns>CSUserGroup instance matching the Guid. NULL if not found.</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserGroupCollection.Find(System.String)">
      <summary>
            Find the CSUserGroup with the given username
            </summary>
      <param name="username">Username of the user group to find in the collection</param>
      <returns>CSUserGroup instance matching the username. NULL if not found.</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserGroupCollection.GetAllUserGroups(Corkscrew.SDK.objects.CSFarm)">
      <summary>
            Gets a list of all user groups in the farm. If the user is not a farm admin, collection will be readonly.
            </summary>
      <param name="farm">The farm to get users for</param>
      <returns>Collection of user groups</returns>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserGroupCollection.Remove(Corkscrew.SDK.security.CSUserGroup)">
      <summary>
            Deletes the user group from the backend and the collection
            </summary>
      <param name="group">Group to delete</param>
    </member>
    <member name="M:Corkscrew.SDK.security.CSUserGroupCollection.Remove(System.Guid)">
      <summary>
            Deletes the user group from the backend and the collection
            </summary>
      <param name="id">Guid of the group to delete</param>
    </member>
    <member name="T:Corkscrew.SDK.security.CSWebIdentity">
      <summary>
            IIdentity implementation for web-authentication module. 
            This class is not used anywhere other than in the web-authentication module.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.security.CSWebIdentity.#ctor(Corkscrew.SDK.security.CSUser)">
      <summary>
            Constructor
            </summary>
      <param name="user">CSUser to build from</param>
    </member>
    <member name="P:Corkscrew.SDK.security.CSWebIdentity.AuthenticationType">
      <summary>
            Get type of authentication. Always "Corkscrew".
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.security.CSWebIdentity.IsAuthenticated">
      <summary>
            Get if user is authenticated. Always true because class is created only post-authentication.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.security.CSWebIdentity.Name">
      <summary>
            Name of the user (Fullname)
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.security.CSWebIdentity.User">
      <summary>
            The CSUser object
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.security.CSWebPrincipal">
      <summary>
            Implements the IPrincipal interface over the CSUser security object
            This class is not used anywhere other than in the web-authentication module!
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.security.CSWebPrincipal.#ctor(Corkscrew.SDK.security.CSUser)">
      <summary>
            Constructor. 
            </summary>
      <param name="user">CSUser to populate</param>
      <exception cref="T:System.ArgumentNullException">If user is NULL</exception>
    </member>
    <member name="P:Corkscrew.SDK.security.CSWebPrincipal.CSIdentity">
      <summary>
            Wrapper around Identity property, exposes as CSWebIdentity.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.security.CSWebPrincipal.GetByUserId(System.Guid)">
      <summary>
            Creates an instance of CSSecurityPrincipal by populating the Identity 
            using the CSUser retrieved from the given Guid.
            A valid instance of CSSecurityPrincipal will be returned even if user is not found. 
            Caller must check IsValid property to ensure a valid user was set.
            </summary>
      <param name="id">Guid of the user principal to populate</param>
      <returns>CSSecurityPrincipal</returns>
    </member>
    <member name="P:Corkscrew.SDK.security.CSWebPrincipal.Id">
      <summary>
            Returns the Guid of the CSUser contained in the Identity.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.security.CSWebPrincipal.Identity">
      <summary>
            Implements IIdentity property for CSSecurityPrincipal via CSWebIdentity.
            Contains the underlying CSUser object
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.security.CSWebPrincipal.IsInRole(System.String)">
      <summary>
            Returns if this principal is a member of the given role (group). 
            Will always be false as Corkscrew does not use groups.
            </summary>
      <param name="role">Name of the group or role to check</param>
      <returns>False.</returns>
    </member>
    <member name="P:Corkscrew.SDK.security.CSWebPrincipal.IsValid">
      <summary>
            Returns if Identity contains a valid CSUser
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.security.CSWebPrincipal.User">
      <summary>
            The underlying user
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.tools.Utility">
      <summary>
            Global Utility class
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.tools.Utility.Base64Decode(System.String)">
      <summary>
            Decode a given Base64 encoded string
            </summary>
      <param name="data">String to decode</param>
      <returns>The decoded string</returns>
    </member>
    <member name="M:Corkscrew.SDK.tools.Utility.Base64Encode(System.String)">
      <summary>
            Get Base64 encoded value of provided string
            </summary>
      <param name="data">Data to encode</param>
      <returns>Base64 encoded value</returns>
    </member>
    <member name="M:Corkscrew.SDK.tools.Utility.CleanupDatabaseColumnNameForHeading(System.String)">
      <summary>
            Take a column name (database table column name) and 
            humanize it so that it is readable. Useful for Grid column headings
            </summary>
      <param name="columnName">Name of the column from the backend</param>
      <returns>Cleaned up string</returns>
    </member>
    <member name="M:Corkscrew.SDK.tools.Utility.ContainsNoCase(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
      <summary>
            Check if the List contains the given string, optionally checking for partial matches while ignoring case
            </summary>
      <param name="source">List to check</param>
      <param name="match">String to search for</param>
      <param name="includePartialMatches">If set, also check for partial matches</param>
      <returns>True if a match (or partial) was found</returns>
    </member>
    <member name="M:Corkscrew.SDK.tools.Utility.ConvertToUTF8String(System.Byte[])">
      <summary>
            Convert a byte array to a UTF-8 string
            </summary>
      <param name="data">Byte array to convert</param>
      <returns>UTF-8 encoded string</returns>
    </member>
    <member name="M:Corkscrew.SDK.tools.Utility.GetAbsoluteLocalAddress(System.Uri,System.String)">
      <summary>
            Gets the rooted local path address from the given Uri. For example, given 
            "http://aquariusos.in/hello/world" we return "/hello/world"
            </summary>
      <param name="address">The Uri to process</param>
      <param name="pathSeperator">[Optional] Path seperator character. Defaults to "/"</param>
      <returns>String containing the Uri string</returns>
    </member>
    <member name="M:Corkscrew.SDK.tools.Utility.GetAbsoluteLocalAddressParent(System.String,System.String)">
      <summary>
            Gets the rooted local path parent address from the given Uri. For example, given 
            "http://aquariusos.in/hello/world" we return "/hello"
            </summary>
      <param name="address">The Uri to process</param>
      <param name="pathSeparator">[Optional] Path separator character. Defaults to "/"</param>
      <returns>String containing the Uri string</returns>
    </member>
    <member name="M:Corkscrew.SDK.tools.Utility.GetAbsoluteUrl(System.String,System.String,System.Int32,System.String)">
      <summary>
            Get absolute Url from a given UrlFragment
            </summary>
      <param name="scheme">HTTP or HTTPS scheme (defaults to HTTP)</param>
      <param name="dnsHostName">Hostname or domain name of website (defaults to localhost)</param>
      <param name="port">Port of website (default is 80)</param>
      <param name="urlFragment">The Url fragment to append (default is /)</param>
      <returns>Fully qualified Url</returns>
    </member>
    <member name="M:Corkscrew.SDK.tools.Utility.GetSha256Hash(System.String)">
      <summary>
            Get SHA 256 hash of the given string
            </summary>
      <param name="data">String to get the hash for</param>
      <returns>SHA 256 hash or Empty</returns>
    </member>
    <member name="M:Corkscrew.SDK.tools.Utility.IsSha256HashOf(System.String,System.String)">
      <summary>
            Calculate the SHA256 hash for [originalString] and compare it with the [hashString] to 
            determine if they are the same.
            </summary>
      <param name="originalString">Plain text string</param>
      <param name="hashString">Previously determined SHA256 hash value</param>
      <returns>True if the two hashes match. False if not.</returns>
    </member>
    <member name="M:Corkscrew.SDK.tools.Utility.IsValidDnsHostname(System.String)">
      <summary>
            Check the given string and determine if it is a valid Dns Hostname. 
            Only names are returned as valid strings, IP addresses, etc are treated as invalid hostnames.
            </summary>
      <param name="hostname">String to check for validity</param>
      <returns>True if the string is a valid DNS hostname</returns>
    </member>
    <member name="M:Corkscrew.SDK.tools.Utility.RemoveExtraSlashes(System.String,System.String)">
      <summary>
            Removes extra "/" characters from a path string
            </summary>
      <param name="path">Path to process</param>
      <param name="slash">The slash character. Defaults to "/"</param>
      <returns>Cleaned up string</returns>
    </member>
    <member name="M:Corkscrew.SDK.tools.Utility.RemoveNonAlphanumericCharacters(System.String,System.Boolean)">
      <summary>
            From the given string, remove all non alphaumeric characters, optionally substitute dashes instead of spaces
            </summary>
      <param name="source">String to cleanup</param>
      <param name="useDashInsteadOfSpace">If set will cause spaces to be replaced with dashes</param>
      <returns>String with alphanumeric characters, optionally with spaces or dashes</returns>
    </member>
    <member name="M:Corkscrew.SDK.tools.Utility.SafeConvertToBool(System.Object)">
      <summary>
            Safely convert object to a Bool
            </summary>
      <param name="source">Object to box</param>
      <returns>Bool value of object or default(bool)</returns>
    </member>
    <member name="M:Corkscrew.SDK.tools.Utility.SafeConvertToDateTime(System.Object)">
      <summary>
            Safely convert object to DateTime
            </summary>
      <param name="source">Object to box</param>
      <returns>DateTime value of object or default(DateTime)</returns>
    </member>
    <member name="M:Corkscrew.SDK.tools.Utility.SafeConvertToGuid(System.Object)">
      <summary>
            Safely convert object to a Guid
            </summary>
      <param name="source">Object to box</param>
      <returns>Guid value of object or Empty Guid</returns>
    </member>
    <member name="M:Corkscrew.SDK.tools.Utility.SafeConvertToInt(System.Object)">
      <summary>
            Safely convert object to an Int
            </summary>
      <param name="source">Object to box</param>
      <returns>Int value of object or zero</returns>
    </member>
    <member name="M:Corkscrew.SDK.tools.Utility.SafeConvertToLong(System.Object)">
      <summary>
            Safely convert object to an Long
            </summary>
      <param name="source">Object to box</param>
      <returns>Long value of object or zero</returns>
    </member>
    <member name="M:Corkscrew.SDK.tools.Utility.SafeString(System.Object,System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Safely wraps a string from an [object] boxed data. Also modifies the result string as per expectations. Removal expectations are performed before Expect expectations. 
            For Empty or Null source, none of the expectations are processed except [onEmpty].
            </summary>
      <param name="source">[object] boxed data</param>
      <param name="onEmpty">Value to return if [source] was empty</param>
      <param name="expectStart">The string should start with this string, if not prefix</param>
      <param name="expectEnd">The string should end with this string, if not suffix</param>
      <param name="removeAtStart">If this string occurs at start of string, it is removed</param>
      <param name="removeAtEnd">If this string occurs at end of string, it is removed</param>
      <returns>String value with all expectations applied, or value of onEmpty</returns>
    </member>
    <member name="M:Corkscrew.SDK.tools.Utility.SafeString(System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Processes a string for emptiness and start/end characters. And checks if string is of a given length.
            </summary>
      <param name="source">The string to format</param>
      <param name="length">Length of the desired string. If set to -1, assigns entire string without length checking</param>
      <param name="canBeNullOrEmpty">If set, does not check [source] for NULL or Empty string value.</param>
      <param name="throwExceptionOnLength">If true, throws an OverflowException if the length does not match expectation. Else, returns the first [length] characters of the string.</param>
      <param name="variableName">Name of the variable related to the string. Used in the thrown exception message</param>
      <param name="onEmpty">Value to return if [source] was empty</param>
      <param name="expectStart">The string should start with this string, if not prefix</param>
      <param name="expectEnd">The string should end with this string, if not suffix</param>
      <param name="removeAtStart">If this string occurs at start of string, it is removed</param>
      <param name="removeAtEnd">If this string occurs at end of string, it is removed</param>
      <returns>String value with all expectations applied, or value of onEmpty</returns>
    </member>
    <member name="M:Corkscrew.SDK.tools.Utility.SizeHuman(System.Int64)">
      <summary>
            Returns the human-readable form of the Size (eg: "36 KB")
            </summary>
      <param name="sizeBytes">The size in bytes</param>
      <returns>String containing the human-readable size</returns>
    </member>
    <member name="T:Corkscrew.SDK.workflow.CSApprovalWorkflow">
      <summary>
            This is an example workflow simulating an approval scenario
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSApprovalWorkflow.#ctor(Corkscrew.SDK.workflow.CSWorkflowInstance)">
      <summary>
            Constructor
            </summary>
      <param name="instance">Workflow instance</param>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSApprovalWorkflow.OnContinued(Corkscrew.SDK.workflow.CSWorkflowInstance,Corkscrew.SDK.workflow.CSWorkflowEventArgs)">
      <summary>
            Workflow continued event handler
            </summary>
      <param name="sender">Workflow instance</param>
      <param name="e">Workflow event arguments</param>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSApprovalWorkflow.OnError(Corkscrew.SDK.workflow.CSWorkflowInstance,Corkscrew.SDK.workflow.CSWorkflowEventArgs)">
      <summary>
            Workflow errored event handler
            </summary>
      <param name="sender">Workflow instance</param>
      <param name="e">Workflow event arguments</param>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSApprovalWorkflow.OnStarted(Corkscrew.SDK.workflow.CSWorkflowInstance,Corkscrew.SDK.workflow.CSWorkflowEventArgs)">
      <summary>
            Workflow starte event handler
            </summary>
      <param name="sender">Workflow instance</param>
      <param name="e">Workflow event arguments</param>
    </member>
    <member name="T:Corkscrew.SDK.workflow.CSCompilerValidationError">
      <summary>
            Validates the workflow definition
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSCompilerValidationError.#ctor(System.String,System.Int32,System.Boolean,System.String)">
      <summary>
            Constructor for the error object
            </summary>
      <param name="message">The error message</param>
      <param name="code">A numeric code for the error</param>
      <param name="isWarning">Whether this is a "warning" level error. If false, then it is a fatal error</param>
      <param name="operationName">Name of the operation that raised this error</param>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSCompilerValidationError.ErrorCode">
      <summary>
            A numeric code for the error
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSCompilerValidationError.IsWarning">
      <summary>
            Whether this is a "warning" level error. If false, then it is a fatal error
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSCompilerValidationError.Message">
      <summary>
            The error message
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSCompilerValidationError.OperationName">
      <summary>
            Name of the operation that raised this error
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.workflow.CSSignatureItem">
      <summary>
            A single item in a Corkscrew Signature Panel
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignatureItem.Comment">
      <summary>
            Any comments entered by the user while acting on the item
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignatureItem.Created">
      <summary>
            Gets the date/time of creation
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignatureItem.CreatedBy">
      <summary>
            Gets the user who created. Lazy-loaded.  
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignatureItem.Id">
      <summary>
            Id of this item
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignatureItem.IsMandatoryMember">
      <summary>
            If set, this member must mandatorily respond for the panel to complete
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignatureItem.Modified">
      <summary>
            Gets the date/time of last modification
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignatureItem.ModifiedBy">
      <summary>
            Gets the user who last modified. Lazy-loaded.  
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignatureItem.RespondedOn">
      <summary>
            Date/time when response was received
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignatureItem.Respondent">
      <summary>
            Polled user who must respond
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignatureItem.ResponsesIsFinalDecision">
      <summary>
            If set, whatever this member responds (if they do) becomes the decision
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignatureItem.State">
      <summary>
            Current state of the panel item
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignatureItem.UseResponseAsTieBreaker">
      <summary>
            If set, in case of a deadlocked signature panel, this response doubles in value.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignatureItem.VoteValue">
      <summary>
            Returns the numeric value of the vote
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.workflow.CSSignaturePanel">
      <summary>
            A signature panel. Created for approval workflows, this keeps track of how many contacts have responded and their responses.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSSignaturePanel.#ctor(Corkscrew.SDK.workflow.SignaturePanelTypeEnum,Corkscrew.SDK.security.CSUser)">
      <summary>
            Create a new signature panel
            </summary>
      <param name="type">Type of panel</param>
      <param name="createdBy">User creating the panel</param>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSSignaturePanel.#ctor(Corkscrew.SDK.workflow.SignaturePanelTypeEnum,Corkscrew.SDK.security.CSUser,System.DateTime)">
      <summary>
            Create a new time-limited signature panel
            </summary>
      <param name="type">Type of panel</param>
      <param name="createdBy">User creating the panel</param>
      <param name="deadline">The deadline for this panel to expire. Set to DateTime.MinValue or some past value to disable deadline feature.</param>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSSignaturePanel.#ctor(Corkscrew.SDK.workflow.SignaturePanelTypeEnum,Corkscrew.SDK.security.CSUser,System.TimeSpan)">
      <summary>
            Create a new time-limited signature panel
            </summary>
      <param name="type">Type of panel</param>
      <param name="createdBy">User creating the panel</param>
      <param name="expireAfter">Timespan value after for this panel to expire</param>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSSignaturePanel.AddPanelMember(Corkscrew.SDK.security.CSUser,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Creates a new signature panel member
            </summary>
      <param name="respondent">The user who is the respondent</param>
      <param name="mandatory">If set, user is marked as a mandatory (must respond to terminate panel)</param>
      <param name="isDecisionMaker">If set, user is marked as the decision maker (vote overrides and panel terminates)</param>
      <param name="isTieBreaker">If set, in case of deadlocks, the value of this vote doubles</param>
      <returns>The created panel member</returns>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignaturePanel.Approvals">
      <summary>
            Gets number of approvals
            </summary>
    </member>
    <member name="E:Corkscrew.SDK.workflow.CSSignaturePanel.Completed">
      <summary>
            Event signaled when the signature panel terminates
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignaturePanel.Created">
      <summary>
            Gets the date/time of creation
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignaturePanel.CreatedBy">
      <summary>
            Gets the user who created. Lazy-loaded.  
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignaturePanel.Deadline">
      <summary>
            If the panel is time-limited, the end date
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSSignaturePanel.Get(System.Guid,Corkscrew.SDK.security.CSUser)">
      <summary>
            Returns a signature panel given its Guid
            </summary>
      <param name="id">Guid of signature panel to return</param>
      <param name="credential">User credential to open with</param>
      <returns>The Signature Panel matching the Guid</returns>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignaturePanel.Id">
      <summary>
            Id of the panel
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignaturePanel.IsDeadlineExpired">
      <summary>
            Returns if the deadline for the panel has expired. 
            Always returns FALSE for a no-deadline panel.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignaturePanel.IsTimelimited">
      <summary>
            Whether the signature panel is time-limited.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignaturePanel.Members">
      <summary>
            Panel members
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignaturePanel.Modified">
      <summary>
            Gets the date/time of last modification
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignaturePanel.ModifiedBy">
      <summary>
            Gets the user who last modified. Lazy-loaded.  
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignaturePanel.PanelType">
      <summary>
            Type of signature panel. Default is a majority panel
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignaturePanel.Progress">
      <summary>
            Gets progress of signature collection, is a percentage value
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSSignaturePanel.RegisterResponse(Corkscrew.SDK.security.CSUser,Corkscrew.SDK.workflow.SignatureItemStateEnum,System.String)">
      <summary>
            Registers the member's response. If the response completes the signature panel, the signature panel is terminated.
            </summary>
      <param name="respondent">User responding</param>
      <param name="response">Response state</param>
      <param name="comment">Optional comment</param>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignaturePanel.Rejections">
      <summary>
            Gets number of rejections
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSSignaturePanel.RemovePanelMember(Corkscrew.SDK.security.CSUser)">
      <summary>
            Removes the given panel member. 
            This will only succeed if the panel member has not yet responded.
            </summary>
      <param name="respondent">User to remove</param>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSSignaturePanel.Start">
      <summary>
            Send for responses
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSSignaturePanel.State">
      <summary>
            Gets the current state of the signature panel (result)
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSSignaturePanel.Terminate">
      <summary>
            Terminates the signature panel
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.workflow.CSWorkflow">
      <summary>
            Workflow implementing apps must either implement ICSWorkflow or inherit from this class.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflow.#ctor(Corkscrew.SDK.workflow.CSWorkflowInstance)">
      <summary>
            Base constructor. Call this to setup the event handlers
            </summary>
      <param name="instance">The workflow instance this workflow is running</param>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflow.Abort">
      <summary>
            Marks the workflow as aborted. 
            Instead of calling this method, callers may also set the [terminate] out parameter to TRUE from 
            any of the Workflow event handlers.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflow.BuildTraceString(Corkscrew.SDK.workflow.CSWorkflowRuntimeContext)">
      <summary>
            Builds a string that surfaces the Ids of the elements in the Workflow runtime context object 
            for tracing/logging purposes.
            </summary>
      <param name="context">Workflow runtime context.</param>
      <returns>String containing the Workflow definition, association, instance and correlation Ids and the current state of the workflow.</returns>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflow.Complete(Corkscrew.SDK.workflow.CSWorkflowEventCompletionTypesEnum)">
      <summary>
            Mark the workflow as completed.
            </summary>
      <param name="typeOfCompletion">Type of completion to set.</param>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflow.Context">
      <summary>
            The workflow runtime context. This object gives access to all the information 
            related to this run of the workflow.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflow.MarkErrored(System.Exception)">
      <summary>
            Mark the workflow as errored
            </summary>
      <param name="exception">Optional exception to include</param>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflow.MarkErrored(System.String)">
      <summary>
            Mark the workflow as errored
            </summary>
      <param name="message">Optional error message to include</param>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflow.OnCompleted(Corkscrew.SDK.workflow.CSWorkflowInstance,Corkscrew.SDK.workflow.CSWorkflowEventArgs)">
      <summary>
            Handles the Workflow's Completed event. This event handler runs AFTER the workflow has completed.  Call the base class handler BEFORE your code.
            You cannot perform any action that would change state of the workflow here. Put code to clean up here.
            </summary>
      <param name="sender">The workflow instance that is raising the event</param>
      <param name="e">The workflow event args. Set e.Terminate to True to terminate the workflow on returning from this handler</param>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflow.OnContinued(Corkscrew.SDK.workflow.CSWorkflowInstance,Corkscrew.SDK.workflow.CSWorkflowEventArgs)">
      <summary>
            Handles the Workflow's Continued event. This event handler runs AFTER the workflow has continued. 
            Put the code to handle the running of the workflow on continuation here. Call the base class handler BEFORE your code.
            </summary>
      <param name="sender">The workflow instance that is raising the event</param>
      <param name="e">The workflow event args. Set e.Terminate to True to terminate the workflow on returning from this handler</param>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflow.OnError(Corkscrew.SDK.workflow.CSWorkflowInstance,Corkscrew.SDK.workflow.CSWorkflowEventArgs)">
      <summary>
            Handles the Workflow's Errored eventThis event handler runs AFTER the workflow has completed.  Call the base class handler BEFORE your code.
            You cannot perform any action that would change state of the workflow here. Put code to clean up here.
            </summary>
      <param name="sender">The workflow instance that is raising the event</param>
      <param name="e">The workflow event args. Set e.Terminate to True to terminate the workflow on returning from this handler</param>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflow.OnPaused(Corkscrew.SDK.workflow.CSWorkflowInstance,Corkscrew.SDK.workflow.CSWorkflowEventArgs)">
      <summary>
            Handles the Workflow's Paused event. This event handler runs AFTER the workflow has been paused. 
            Put the code to handle things like state-persistence here. Call the base class handler BEFORE your code.
            </summary>
      <param name="sender">The workflow instance that is raising the event</param>
      <param name="e">The workflow event args. Set e.Terminate to True to terminate the workflow on returning from this handler</param>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflow.OnStarted(Corkscrew.SDK.workflow.CSWorkflowInstance,Corkscrew.SDK.workflow.CSWorkflowEventArgs)">
      <summary>
            Handles the Workflow's Started event. This event handler runs AFTER the workflow has started to run. 
            Put all the code to handle running of your workflow here. Call the base class handler BEFORE your code.
            </summary>
      <param name="sender">The workflow instance that is raising the event</param>
      <param name="e">The workflow event args. Set e.Terminate to True to terminate the workflow on returning from this handler</param>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflow.Pause(System.String)">
      <summary>
            Pauses the workflow instance.
            </summary>
      <param name="persistenceInformation">Serialized information to persist. This is passed into the Continued event when workflow resumes.</param>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflow.WriteTrace(System.String,System.Object[])">
      <summary>
            Write tracing information to the InstanceWriter
            </summary>
      <param name="message">Message to write. This can also be a format string</param>
      <param name="data">If [message] is a format string, these are the token replacement values.</param>
    </member>
    <member name="T:Corkscrew.SDK.workflow.CSWorkflowAssociation">
      <summary>
            Association of a Corkscrew workflow to a target
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowAssociation.AllInstances">
      <summary>
            Returns all the available instances for this workflow
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowAssociation.AllowManualStart">
      <summary>
            Allow starting the workflow manually. 
            Only Administrator users and the user owning the item the workflow is attached to can start a workflow manually.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowAssociation.AllowProcessingBubbledTriggers">
      <summary>
            If set, the workflow will be triggered on changes in child objects that are not caught at a lower level.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowAssociation.AllRunnableInstances">
      <summary>
            Returns the runnable instances for this workflow
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowAssociation.AssociatedEntity">
      <summary>
            The entity associated with the workflow. Is never NULL.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowAssociation.CanUserModifyWorkflowAssociation">
      <summary>
            Returns if the authenticated user can modify this association
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowAssociation.Created">
      <summary>
            Date and time of creation. 
            Set by constructor.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowAssociation.CreatedBy">
      <summary>
            User who created.
            Set by constructor.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowAssociation.CreateDirectoryAssociation(Corkscrew.SDK.workflow.CSWorkflowDefinition,System.String,Corkscrew.SDK.objects.CSFileSystemEntryDirectory)">
      <summary>
            Create a directory level workflow association
            </summary>
      <param name="definition">Workflow definition</param>
      <param name="name">Name for the association</param>
      <param name="directory">Directory to associate to</param>
      <returns>The created association or NULL</returns>
      <exception cref="T:System.ArgumentNullException">If definition or name or directory are null</exception>
      <exception cref="T:System.UnauthorizedAccessException">If user is not an administrator or does not have FullControl permission on the directory</exception>
      <exception cref="T:Corkscrew.SDK.exceptions.CSWorkflowException">If definition is not enabled or it does not have a manifest</exception>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowAssociation.CreateFarmAssociation(Corkscrew.SDK.workflow.CSWorkflowDefinition,System.String)">
      <summary>
            Create a farm level workflow association
            </summary>
      <param name="definition">Workflow definition</param>
      <param name="name">Name for the association</param>
      <returns>The created association or NULL</returns>
      <exception cref="T:System.ArgumentNullException">If definition or name are null</exception>
      <exception cref="T:System.UnauthorizedAccessException">If user is not a farm administrator</exception>
      <exception cref="T:Corkscrew.SDK.exceptions.CSWorkflowException">If definition is not enabled or it does not have a manifest</exception>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowAssociation.CreateSiteAssociation(Corkscrew.SDK.workflow.CSWorkflowDefinition,System.String,Corkscrew.SDK.objects.CSSite)">
      <summary>
            Create a site level workflow association
            </summary>
      <param name="definition">Workflow definition</param>
      <param name="name">Name for the association</param>
      <param name="site">Site to associate to</param>
      <returns>The created association or NULL</returns>
      <exception cref="T:System.ArgumentNullException">If definition or name or site are null</exception>
      <exception cref="T:System.UnauthorizedAccessException">If user is not a farm or site administrator</exception>
      <exception cref="T:Corkscrew.SDK.exceptions.CSWorkflowException">If definition is not enabled or it does not have a manifest</exception>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowAssociation.CustomAssociationInformation">
      <summary>
            This is copied from WorkflowDefinition.DefaultAssociationData during association. 
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowAssociation.Delete">
      <summary>
            Delete the association
            </summary>
      <returns>Success of deletion</returns>
      <exception cref="T:System.UnauthorizedAccessException">If the user does not have sufficient privileges to delete the association</exception>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowAssociation.Disable">
      <summary>
            Disable the workflow association
            </summary>
      <returns>Success of the operation</returns>
      <exception cref="T:System.UnauthorizedAccessException">If the user does not have sufficient privileges to modify the association</exception>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowAssociation.Dispose">
      <summary>
            Dispose the definition
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowAssociation.Dispose(System.Boolean)">
      <summary>
            Dispose the definition
            </summary>
      <param name="disposing">True if really disposing</param>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowAssociation.Enable">
      <summary>
            Enable the workflow association
            </summary>
      <returns>Success of the operation</returns>
      <exception cref="T:System.UnauthorizedAccessException">If the user does not have sufficient privileges to modify the association</exception>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowAssociation.Farm">
      <summary>
            Associated farm, will always return the current farm.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowAssociation.GetHistory">
      <summary>
            Get the history for this association
            </summary>
      <returns>Workflow history chain (linked list)</returns>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowAssociation.Id">
      <summary>
            Guid of the association
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowAssociation.IsEnabled">
      <summary>
            Is the workflow association enabled
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowAssociation.IsEventSubscribed(Corkscrew.SDK.workflow.WorkflowTriggerEventNamesEnum)">
      <summary>
            Returns if the given event is subscribed to
            </summary>
      <param name="eventName">Trigger to check</param>
      <returns>True if registered</returns>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowAssociation.Modified">
      <summary>
            Date and time of modification. 
            Set internally or by persistence.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowAssociation.ModifiedBy">
      <summary>
            User who modified. 
            Set internally or by persistence.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowAssociation.Name">
      <summary>
            Name of the workflow (as shown in "Installed/Available workflows" lists)
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowAssociation.Save">
      <summary>
            Save changes made to the workflow association
            </summary>
      <returns>Success of the save operation</returns>
      <exception cref="T:System.UnauthorizedAccessException">If the user does not have sufficient privileges to modify the association</exception>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowAssociation.Site">
      <summary>
            Associated Site 
            (will be NULL only for Farm level workflows)
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowAssociation.StartOnCreate">
      <summary>
            If set, automatically fires the workflow when a new item is created.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowAssociation.StartOnModify">
      <summary>
            If set, automatically fires the workflow when the item is modified in someway (property and content).
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowAssociation.SubscribeWorkflowEvent(Corkscrew.SDK.workflow.WorkflowTriggerEventNamesEnum)">
      <summary>
            Subscribe to a workflow event
            </summary>
      <param name="eventName">The event trigger name</param>
      <exception cref="T:System.UnauthorizedAccessException">If the user does not have sufficient privileges to modify the association</exception>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowAssociation.UnsubscribeWorkflowEvent(Corkscrew.SDK.workflow.WorkflowTriggerEventNamesEnum)">
      <summary>
            Unsubscribe from a workflow event
            </summary>
      <param name="eventName">The event trigger name</param>
      <exception cref="T:System.UnauthorizedAccessException">If the user does not have sufficient privileges to modify the association</exception>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowAssociation.WorkflowDefinition">
      <summary>
            Workflow definition
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowAssociation.WorkflowScope">
      <summary>
            Returns the scope set in the association
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.workflow.CSWorkflowAssociationCollection">
      <summary>
            Collection of workflow associations.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowAssociationCollection.#ctor(Corkscrew.SDK.objects.CSFarm,System.Boolean)">
      <summary>
            Creates a collection of associations, populated with Farm associated workflows
            </summary>
      <param name="farm">Farm to populate collection</param>
      <param name="isReadonly">Flag to set the collection as readonly</param>
      <exception cref="T:System.ArgumentNullException">If farm is null</exception>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowAssociationCollection.#ctor(Corkscrew.SDK.objects.CSFileSystemEntryDirectory,System.Boolean)">
      <summary>
            Creates a collection of associations, populated with workflows associated to the given Directory
            </summary>
      <param name="directory">Directory to populate for</param>
      <param name="isReadonly">Flag to set the collection as readonly</param>
      <exception cref="T:System.ArgumentNullException">If directory is null</exception>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowAssociationCollection.#ctor(Corkscrew.SDK.objects.CSSite,System.Boolean)">
      <summary>
            Creates a collection of associations, populated with workflows associated to the given Site
            </summary>
      <param name="site">Site to open for</param>
      <param name="isReadonly">Flag to set the collection as readonly</param>
      <exception cref="T:System.ArgumentNullException">If site is null</exception>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowAssociationCollection.Add(Corkscrew.SDK.workflow.CSWorkflowAssociation)">
      <summary>
            Add association to collection
            </summary>
      <param name="association">Association to add</param>
      <exception cref="T:System.ArgumentNullException">If association is null</exception>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowAssociationCollection.Find(System.Guid)">
      <summary>
            Find an association with its Guid
            </summary>
      <param name="id">Guid of the association to find</param>
      <returns>Association found or NULL</returns>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowAssociationCollection.FindByAssociatedEntityId(System.Guid)">
      <summary>
            Find associations created for the associated entity
            </summary>
      <param name="entityId">Guid of the entity</param>
      <returns>IEnumerable of workflow associations found or empty list.</returns>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowAssociationCollection.FindByDefinition(System.Guid)">
      <summary>
            Find associations created for the given definition
            </summary>
      <param name="definitionId">Guid of the workflow definition</param>
      <returns>IEnumerable of workflow associations found or empty list.</returns>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowAssociationCollection.Remove(Corkscrew.SDK.workflow.CSWorkflowAssociation)">
      <summary>
            Remove association from collection
            </summary>
      <param name="association">Association to remove</param>
      <exception cref="T:System.ArgumentNullException">If association is null</exception>
    </member>
    <member name="T:Corkscrew.SDK.workflow.CSWorkflowDefinition">
      <summary>
            Represents the definition of a single workflow. Each workflow can be defined only once, a farm may contain multiple workflow definitions.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowDefinition.AllInstances">
      <summary>
            Returns all the available instances for this workflow
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowDefinition.AllowManualStart">
      <summary>
            Allow starting the workflow manually. 
            Only Administrator users and the user owning the item the workflow is attached to can start a workflow manually.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowDefinition.AllowProcessingBubbledTriggers">
      <summary>
            If set, the workflow will be triggered on changes in child objects that are not caught at a lower level.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowDefinition.AllRunnableInstances">
      <summary>
            Returns the runnable instances for this workflow
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowDefinition.Associations">
      <summary>
            Associations of this definition
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowDefinition.Created">
      <summary>
            Date and time of creation. 
            Set by constructor.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowDefinition.CreatedBy">
      <summary>
            User who created.
            Set by constructor.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowDefinition.CreateDirectoryAssociation(System.String,Corkscrew.SDK.objects.CSFileSystemEntryDirectory)">
      <summary>
            Create a directory level workflow association
            </summary>
      <param name="name">Name for the association</param>
      <param name="directory">Directory to associate to</param>
      <returns>The created association or NULL</returns>
      <exception cref="T:System.UnauthorizedAccessException">If the user does not have permissions to modify the workflow definition</exception>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowDefinition.CreateFarmAssociation(System.String)">
      <summary>
            Create a farm level workflow association
            </summary>
      <param name="name">Name for the association</param>
      <returns>The created association or NULL</returns>
      <exception cref="T:System.UnauthorizedAccessException">If the user does not have permissions to modify the workflow definition</exception>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowDefinition.CreateManifest(Corkscrew.SDK.workflow.WorkflowEngineEnum,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            Creates a workflow manifest
            </summary>
      <param name="engine">Workflow engine version</param>
      <param name="assemblyName">Assembly file name of the compiled result</param>
      <param name="className">Name of class (fully qualified, including namespace) that contains the required workflow</param>
      <param name="alwaysCompile">If set, workflow is always compiled (mutually exclusive with cacheCompileResults)</param>
      <param name="cacheCompileResults">If set, compilation result is cached to backend (mutually exclusive with alwaysCompile)</param>
      <returns>The created manifest object or NULL</returns>
      <exception cref="T:System.UnauthorizedAccessException">If the user does not have permissions to modify the workflow definition</exception>
      <exception cref="T:System.ArgumentNullException">If definition, assemblyName or className are null</exception>
      <exception cref="T:Corkscrew.SDK.exceptions.CSWorkflowException">If the definition is disabled or already has a manifest attached</exception>
      <exception cref="T:System.ArgumentException">If alwaysCompile and cacheCompileResults are both set.</exception>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowDefinition.CreateSiteAssociation(System.String,Corkscrew.SDK.objects.CSSite)">
      <summary>
            Create a site level workflow association
            </summary>
      <param name="name">Name for the association</param>
      <param name="site">Site to associate to</param>
      <returns>The created association or NULL</returns>
      <exception cref="T:System.UnauthorizedAccessException">If the user does not have permissions to modify the workflow definition</exception>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowDefinition.DefaultAssociationData">
      <summary>
            Default association data
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowDefinition.Delete">
      <summary>
            Deletes this definition
            </summary>
      <returns>Success of deletion</returns>
      <exception cref="T:System.UnauthorizedAccessException">If the user does not have permissions to delete the workflow definition</exception>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowDefinition.DeleteAllAssociations">
      <summary>
            Delete all associations for definition
            </summary>
      <returns>Success of deletion</returns>
      <exception cref="T:System.UnauthorizedAccessException">If the user does not have permissions to modify the workflow definition</exception>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowDefinition.DeregisterTrigger(Corkscrew.SDK.workflow.WorkflowTriggerEventNamesEnum)">
      <summary>
            De-register a workflow trigger
            </summary>
      <param name="trigger">The event trigger</param>
      <exception cref="T:System.UnauthorizedAccessException">If the user does not have permissions to modify the workflow definition</exception>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowDefinition.Description">
      <summary>
            Description of the workflow. Displayed on the UI.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowDefinition.Disable">
      <summary>
            Disable the workflow definition
            </summary>
      <returns>Success of the operation</returns>
      <exception cref="T:System.UnauthorizedAccessException">If the user does not have permissions to modify the workflow definition</exception>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowDefinition.Dispose">
      <summary>
            Dispose the definition
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowDefinition.Dispose(System.Boolean)">
      <summary>
            Dispose the definition
            </summary>
      <param name="disposing">True if disposing</param>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowDefinition.Enable">
      <summary>
            Enable the workflow definition
            </summary>
      <returns>Success of the operation</returns>
      <exception cref="T:System.UnauthorizedAccessException">If the user does not have permissions to modify the workflow definition</exception>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowDefinition.Farm">
      <summary>
            Reference to the Farm
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowDefinition.Get(Corkscrew.SDK.objects.CSFarm,System.Guid)">
      <summary>
            Get a definition by id
            </summary>
      <param name="farm">The farm to get the definition for</param>
      <param name="id">Guid of workflow</param>
      <returns>Workflow definition</returns>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowDefinition.Get(Corkscrew.SDK.objects.CSFarm,System.String)">
      <summary>
            Get a definition by name
            </summary>
      <param name="farm">The farm to get the definition for</param>
      <param name="name">Name of workflow</param>
      <returns>Workflow definition</returns>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowDefinition.GetManifest">
      <summary>
            Get the workflow manifest for this definition
            </summary>
      <returns>The workflow manifest or NULL</returns>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowDefinition.HasEventsForScope(Corkscrew.SDK.constants.ScopeEnum)">
      <summary>
            Returns if the definition contains any enabled events for given scope
            </summary>
      <param name="scope">Scope to check (only Farm, Site and Directory are valid)</param>
      <returns>True if scope has events</returns>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowDefinition.Id">
      <summary>
            Workflow definition Id
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowDefinition.IsEnabled">
      <summary>
            Is the workflow definition enabled
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowDefinition.IsTriggerRegistered(Corkscrew.SDK.workflow.WorkflowTriggerEventNamesEnum)">
      <summary>
            Returns if there is already a registration for the given trigger event
            </summary>
      <param name="trigger">Trigger to check</param>
      <returns>True if trigger is registered</returns>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowDefinition.Modified">
      <summary>
            Date and time of modification. 
            Set internally or by persistence.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowDefinition.ModifiedBy">
      <summary>
            User who modified. 
            Set internally or by persistence.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowDefinition.Name">
      <summary>
            Name of the workflow (as shown in "Installed/Available workflows" lists). 
            The name must be unique in a farm, checked at the time of saving the definition.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowDefinition.RegisterTrigger(Corkscrew.SDK.workflow.WorkflowTriggerEventNamesEnum)">
      <summary>
            Register a workflow trigger
            </summary>
      <param name="trigger">The event trigger</param>
      <exception cref="T:System.UnauthorizedAccessException">If the user does not have permissions to modify the workflow definition</exception>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowDefinition.Save">
      <summary>
            Save changes made to the definition
            </summary>
      <returns>Success of saving the changes</returns>
      <exception cref="T:System.UnauthorizedAccessException">If the user does not have permissions to modify the workflow definition</exception>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowDefinition.StartOnCreate">
      <summary>
            If set, automatically fires the workflow when a new item is created.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowDefinition.StartOnModify">
      <summary>
            If set, automatically fires the workflow when the item is modified in someway (property and content).
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowDefinition.ValidateDefinition">
      <summary>
            Validates if the definition is good
            </summary>
      <returns>A list of the errors found during validation</returns>
    </member>
    <member name="T:Corkscrew.SDK.workflow.CSWorkflowDefinitionCollection">
      <summary>
            Collection of workflow definitions
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowDefinitionCollection.#ctor(Corkscrew.SDK.objects.CSFarm,System.Boolean)">
      <summary>
            Open a collection of definitions
            </summary>
      <param name="farm">The farm this collection belongs to</param>
      <param name="isReadonly">Flag to indicate whether to open it in readonly mode</param>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowDefinitionCollection.#ctor(System.Collections.Generic.IEnumerable{Corkscrew.SDK.workflow.CSWorkflowDefinition})">
      <summary>
            Returns a collection from provided enumeration. Collection is readonly.
            </summary>
      <param name="list">Enumeration of definitions to populate</param>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowDefinitionCollection.Add(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Creates a new workflow definition.
            </summary>
      <param name="name">Name of the workflow - must be unique in the Farm</param>
      <param name="description">Description of the workflow</param>
      <param name="defaultAssociationData">Default association data (serialized)</param>
      <param name="startWorkflowOnCreate">Allow workflow to automatically start on new item creation</param>
      <param name="startWorkflowOnModify">Allow workflow to automatically start on item modification</param>
      <param name="allowStartWorkflowManually">Allow workflow to be manually started by an administrator or the item owner</param>
      <returns>Workflow definition, persisted. If creation fails, returns NULL.</returns>
      <exception cref="T:Corkscrew.SDK.exceptions.IsReadonlyException">If collection is readonly</exception>
      <exception cref="T:System.UnauthorizedAccessException">If user is not a Farm administrator</exception>
      <exception cref="T:Corkscrew.SDK.exceptions.CSWorkflowException">If definition could not be saved</exception>
      <exception cref="T:System.ArgumentException">If another definition with the same name already exists</exception>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowDefinitionCollection.Farm">
      <summary>
            Returns reference to the farm this workflow collection belongs to
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowDefinitionCollection.Find(System.Guid)">
      <summary>
            Find the definition with the given Guid
            </summary>
      <param name="id">Guid of the workflow to search for</param>
      <returns>Workflow definition or null</returns>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowDefinitionCollection.Find(System.String)">
      <summary>
            Find the definition with the given Guid
            </summary>
      <param name="name">Name of the workflow to search for</param>
      <returns>Workflow definition or null</returns>
    </member>
    <member name="T:Corkscrew.SDK.workflow.CSWorkflowEventArgs">
      <summary>
            Event argument used by Corkscrew Workflow events
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowEventArgs.#ctor(Corkscrew.SDK.workflow.CSWorkflowInstance)">
      <summary>
            Constructor
            </summary>
      <param name="instance">Workflow instance to initialize with</param>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowEventArgs.Context">
      <summary>
            The workflow runtime context
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowEventArgs.IsException">
      <summary>
            Returns if the instance has suffered an exception
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowEventArgs.Terminate">
      <summary>
            Event consumer must set this to True to cause the workflow to terminate on return from this handler
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.workflow.CSWorkflowEventCompletionTypesEnum">
      <summary>
            Types of completion (end) states of a Corkscrew Workflow. 
            These values apply when setting the event type to Completed.
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.CSWorkflowEventCompletionTypesEnum.Undefined">
      <summary>
            Unknown or not set (or not completed)
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.CSWorkflowEventCompletionTypesEnum.Successful">
      <summary>
            Successfully completed
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.CSWorkflowEventCompletionTypesEnum.ErrorOnStart">
      <summary>
            Workflow failed on attempting to (initial) start it. 
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.CSWorkflowEventCompletionTypesEnum.ErrorProcessing">
      <summary>
            Workflow suffered a catastrophic failure while running
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.CSWorkflowEventCompletionTypesEnum.TerminatedByUser">
      <summary>
            Workflow was terminated by the caller or the user
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.CSWorkflowEventCompletionTypesEnum.Aborted">
      <summary>
            Workflow was internally aborted (through the workflow's own code, not user action)
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.workflow.CSWorkflowEventTypesEnum">
      <summary>
            Events raised by Corkscrew Workflow
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.CSWorkflowEventTypesEnum.Undefined">
      <summary>
            Unknown or not set
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.CSWorkflowEventTypesEnum.Started">
      <summary>
            Workflow has started execution (initial fire, not a continuation)
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.CSWorkflowEventTypesEnum.Paused">
      <summary>
            Workflow execution is paused to wait for some event or time.
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.CSWorkflowEventTypesEnum.Continued">
      <summary>
            Workflow continues from previous (Paused) stage
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.CSWorkflowEventTypesEnum.Completed">
      <summary>
            Workflow has completed in one of the completion states
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.CSWorkflowEventTypesEnum.Errored">
      <summary>
            The workflow system encountered an unhandled exception and will terminate
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.workflow.CSWorkflowHistory">
      <summary>
            Provides information about the historical record of a Corkscrew Workflow instance's progress
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowHistory.Association">
      <summary>
            Reference to the workflow association
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowHistory.AssociationData">
      <summary>
            Association data string
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowHistory.CompletedReason">
      <summary>
            If CurrentState is Completed, then this would give the completion reason.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowHistory.Created">
      <summary>
            Date and time of creation. 
            Set by constructor.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowHistory.CreatedBy">
      <summary>
            User who created.
            Set by constructor.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowHistory.ErrorMessage">
      <summary>
            The full error message (including stack trace, etc) if the CompletedReason is one of the error states
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowHistory.Event">
      <summary>
            The previous workflow event that occured. The latest one is found in the WorkflowInstance record.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowHistory.Farm">
      <summary>
            Associated farm, will always return the current farm.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowHistory.Id">
      <summary>
            Guid of the record
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowHistory.Instance">
      <summary>
            The instance this historical record is for
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowHistory.InstantiatedEntity">
      <summary>
            The instantiated entity.
             Will never be NULL
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowHistory.Site">
      <summary>
            Associated Site 
            (will be NULL only for Farm level workflows)
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowHistory.State">
      <summary>
            The state of this workflow
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.workflow.CSWorkflowHistoryChain">
      <summary>
            The chain of historical record for a Corkscrew workflow. 
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowHistoryChain.#ctor">
      <summary>
            Public constructor, does nothing
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowHistoryChain.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for serialization
            </summary>
      <param name="info">Serialization info</param>
      <param name="context">Streaming context</param>
    </member>
    <member name="T:Corkscrew.SDK.workflow.CSWorkflowInstance">
      <summary>
            A single instance of a workflow
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowInstance.Abort">
      <summary>
            Marks the workflow as aborted. 
            Instead of calling this method, callers may also set the [terminate] out parameter to TRUE from 
            any of the Workflow event handlers.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowInstance.Association">
      <summary>
            The association for this instance
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowInstance.CanChangeState">
      <summary>
            Returns if the workflow is in one of the states that allows state to be updated.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowInstance.Complete(Corkscrew.SDK.workflow.CSWorkflowEventCompletionTypesEnum)">
      <summary>
            Mark the workflow as completed.
            </summary>
      <param name="typeOfCompletion">Type of completion to set.</param>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowInstance.CompletedReason">
      <summary>
            If CurrentState is Completed, then this would give the completion reason.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowInstance.Continue">
      <summary>
            Sends the Continue event to the workflow
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowInstance.CopyItem(Corkscrew.SDK.objects.CSFileSystemEntry,Corkscrew.SDK.objects.CSFileSystemEntryDirectory,System.Boolean)">
      <summary>
            Copy the given filesystem item to the given destination directory. The destination can be on another site.
            </summary>
      <param name="source">The source filesystem item</param>
      <param name="destinationDirectory">The directory to copy to</param>
      <param name="preserveMetadata">If false, the Created/Modified/LastAccessed timestamps and credentials are modified to current values</param>
      <returns>The copied new filesytem item</returns>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowInstance.CurrentState">
      <summary>
            The current state of this workflow
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowInstance.Dispose">
      <summary>
            Dispose the instance
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowInstance.Dispose(System.Boolean)">
      <summary>
            Dispose the instance
            </summary>
      <param name="disposing">True if disposing</param>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowInstance.ErrorMessage">
      <summary>
            The full error message (including stack trace, etc) if the CompletedReason is one of the error states
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.CSWorkflowInstance.EVENTHANDLER_RUNTIME_LIMIT_MILLISECONDS">
      <summary>
            The number of milliseconds the workflow event handler will timeout in. If the handler does not 
            complete in this time-limit, it is aborted and the workflow instance will be terminated as failed.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowInstance.Events">
      <summary>
            Collection of events
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowInstance.Farm">
      <summary>
            Associated farm, will always return the current farm.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowInstance.GetHistory">
      <summary>
            Get the history for this instance
            </summary>
      <returns>Workflow history chain (linked list)</returns>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowInstance.Id">
      <summary>
            Guid of this instance of the workflow (for tracing events, logs, etc)
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowInstance.InstanceInformation">
      <summary>
            Serialized custom data. 
            Format is managed by workflow through instantiation or step-related forms.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowInstance.InstantiableEntity">
      <summary>
            Associated entity. 
            Will never be NULL.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowInstance.IsLoadedInRuntime">
      <summary>
            Get/set if this instance is currently loaded in a runtime
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowInstance.LastException">
      <summary>
            The last exception raised, if CompletedReason is one of the error states
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowInstance.MarkErrored(System.Exception)">
      <summary>
            Mark the workflow as errored
            </summary>
      <param name="exception">Optional exception to include</param>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowInstance.MarkErrored(System.String)">
      <summary>
            Mark the workflow as errored
            </summary>
      <param name="message">Optional error message to include</param>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowInstance.Pause(System.String)">
      <summary>
            Pauses the workflow instance.
            </summary>
      <param name="persistenceInformation">Serialized information to persist. This is passed into the Continued event when workflow resumes.</param>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowInstance.RefreshLatestState">
      <summary>
            Refreshes the latest state information from the persistence store
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowInstance.RunInstanceCorrelationId">
      <summary>
            Guid for this instance of the execution. On each reload from persistence layer, 
            this will be changed. This allows each hydration of the instance to be tracked seperately.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowInstance.Site">
      <summary>
            Associated Site 
            (will be NULL only for Farm level workflows)
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowInstance.Start">
      <summary>
            Sends the Start event to the workflow
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowInstance.TraceWriter">
      <summary>
            Gets/sets a TextWriter that handles tracing calls through WriteTrace()
            </summary>
    </member>
    <member name="E:Corkscrew.SDK.workflow.CSWorkflowInstance.WorkflowCompleted">
      <summary>
            Fires after completion of the workflow. No state changes of the workflow is permitted. 
            </summary>
    </member>
    <member name="E:Corkscrew.SDK.workflow.CSWorkflowInstance.WorkflowContinued">
      <summary>
            Fires after the workflow has been resumed after a paused state. The workflow must perform 
            its continuation activity for the specific associated item within this event.
            </summary>
    </member>
    <member name="E:Corkscrew.SDK.workflow.CSWorkflowInstance.WorkflowErrored">
      <summary>
            Fires when there is an unhandled exception in the workflow code and it bubbles up into the Corkscrew engine.
            </summary>
    </member>
    <member name="E:Corkscrew.SDK.workflow.CSWorkflowInstance.WorkflowPaused">
      <summary>
            Fires when the workflow is paused to wait for some time period or event.
            </summary>
    </member>
    <member name="E:Corkscrew.SDK.workflow.CSWorkflowInstance.WorkflowStarted">
      <summary>
            Fires after the workflow has been set up and execution has been started. The workflow must perform 
            its "First Run" activity for the specific associated item within this event.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowInstance.WriteTrace(System.String,System.Object[])">
      <summary>
            Write tracing information to the TraceWriter
            </summary>
      <param name="message">Message to write. This can also be a format string</param>
      <param name="data">If [message] is a format string, these are the token replacement values.</param>
    </member>
    <member name="T:Corkscrew.SDK.workflow.CSWorkflowInstanceCollection">
      <summary>
            A collection of workflow instances
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowInstanceCollection.GetAllRunnable(Corkscrew.SDK.objects.CSFarm)">
      <summary>
            Gets all runnable workflow instances in the farm
            </summary>
      <param name="farm">The farm to get instances for</param>
      <returns>Instance collection</returns>
      <exception cref="T:System.ArgumentNullException">If farm is null or the authenticated user set in the farm is null</exception>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowInstanceCollection.GetAllRunnable(Corkscrew.SDK.objects.CSSite)">
      <summary>
            Gets all runnable workflow instances in the site
            </summary>
      <param name="site">The site to get instances for</param>
      <returns>Instance collection</returns>
      <exception cref="T:System.ArgumentNullException">If farm is null or the authenticated user set in the farm is null</exception>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowInstanceCollection.GetInstances(Corkscrew.SDK.workflow.CSWorkflowAssociation,System.Boolean)">
      <summary>
            Get instances for the given association
            </summary>
      <param name="association">Association to get instances for</param>
      <param name="onlyRunnable">If set, returns only runnable and inprogress instances</param>
      <returns>Instance collection</returns>
      <exception cref="T:System.ArgumentNullException">If association is null</exception>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowInstanceCollection.GetInstances(Corkscrew.SDK.workflow.CSWorkflowDefinition,System.Boolean)">
      <summary>
            Get instances for the given definition
            </summary>
      <param name="definition">The definition to fetch instances for</param>
      <param name="onlyRunnable">If set, returns only runnable and inprogress instances</param>
      <returns>Instance collection</returns>
      <exception cref="T:System.ArgumentNullException">If definition is null</exception>
    </member>
    <member name="T:Corkscrew.SDK.workflow.CSWorkflowManifest">
      <summary>
            Workflow Manifest. A manifest is a list of items. In this case, this is a list of files, source code, etc that are necessary 
            to build and run the workflow. Each CSWorkflowDefinition must contain exactly one manifest to enable it to be executed.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowManifest.AddItem(System.String,System.String,Corkscrew.SDK.workflow.WorkflowManifestItemTypeEnum,System.Boolean,System.Byte[],System.String,System.String)">
      <summary>
            Create a new manifest item
            </summary>
      <param name="fileName">Filename of file</param>
      <param name="filenameExtension">File extension name of file</param>
      <param name="type">Type of file</param>
      <param name="isRequiredForExecution">Whether required for execution</param>
      <param name="content">Content of the file as a byte array</param>
      <param name="buildRelativeFolder">Folder to place file in during build. Must be a relative path (file will be hosted in a temporary folder).</param>
      <param name="runtimeRelativeFolder">Folder to place file when running the workflow. Must be a relative path (file will be hosted in a temporary folder).</param>
      <returns>Created manifest item</returns>
      <exception cref="T:System.UnauthorizedAccessException">If the user is not a Farm administrator</exception>
      <exception cref="T:System.ArgumentNullException">If manifest is null, if both fileName and filenameExtension are empty, if the content is empty for an item that is not a PrimaryAssembly</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If type is Unknown</exception>
      <exception cref="T:System.ArgumentException">If type is a Xaml file but the manifest.WorkflowEngine is not a Xaml-type, or filenameExtension does not match the item type, 
            if the buildRelativeFolder or runtimeRelativeFolder are rooted paths, an item with the same filename and extension already exists</exception>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifest.AlwaysCompile">
      <summary>
            If set, will always compile the output. 
            If this is set, CacheCompileResults is ignored.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifest.BuildAssemblyCompany">
      <summary>
            Assembly company to set on build
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifest.BuildAssemblyCopyright">
      <summary>
            Assembly copyright to set on build
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifest.BuildAssemblyDescription">
      <summary>
            Assembly description to set on build
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifest.BuildAssemblyFileVersion">
      <summary>
            Assembly file version to set on build
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifest.BuildAssemblyProduct">
      <summary>
            Assembly product to set on build
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifest.BuildAssemblyTitle">
      <summary>
            Assembly title to set on build
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifest.BuildAssemblyTrademark">
      <summary>
            Assembly trademark to set on build
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifest.BuildAssemblyVersion">
      <summary>
            Assembly version to set on build
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifest.CacheCompileResults">
      <summary>
            If set, results of the compile are persisted for reuse. 
            This is used only if AlwaysCompile is FALSE.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifest.Created">
      <summary>
            Date and time of creation. 
            Set by constructor.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifest.CreatedBy">
      <summary>
            User who created.
            Set by constructor.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowManifest.CreateManifest(Corkscrew.SDK.workflow.CSWorkflowDefinition,Corkscrew.SDK.workflow.WorkflowEngineEnum,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            Creates a workflow manifest
            </summary>
      <param name="definition">The workflow definition to create the manifest for</param>
      <param name="engine">Workflow engine version</param>
      <param name="assemblyName">Assembly file name of the compiled result</param>
      <param name="className">Name of class (fully qualified, including namespace) that contains the required workflow</param>
      <param name="alwaysCompile">If set, workflow is always compiled (mutually exclusive with cacheCompileResults)</param>
      <param name="cacheCompileResults">If set, compilation result is cached to backend (mutually exclusive with alwaysCompile)</param>
      <returns>The created manifest object or NULL</returns>
      <exception cref="T:System.UnauthorizedAccessException">If the user does not have permissions to modify the workflow definition</exception>
      <exception cref="T:System.ArgumentNullException">If definition, assemblyName or className are null</exception>
      <exception cref="T:Corkscrew.SDK.exceptions.CSWorkflowException">If the definition is disabled or already has a manifest attached</exception>
      <exception cref="T:System.ArgumentException">If alwaysCompile and cacheCompileResults are both set.</exception>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowManifest.Delete">
      <summary>
            Deletes this manifest (will also cause deletion of all manifest items)
            </summary>
      <exception cref="T:System.UnauthorizedAccessException">If the user is not a Farm administrator</exception>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowManifest.GetItems">
      <summary>
            Returns the manifest items for this manifest
            </summary>
      <returns>Readonly list of manifest items</returns>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifest.Id">
      <summary>
            Id of the workflow manifest
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifest.LastCompiled">
      <summary>
            Date/time of the last successful compilation
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifest.Modified">
      <summary>
            Date and time of modification. 
            Set internally or by persistence.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifest.ModifiedBy">
      <summary>
            User who modified. 
            Set internally or by persistence.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifest.OutputAssemblyName">
      <summary>
            Name of the output assembly. Either generated at compilation time or present in the manifest.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowManifest.RemoveItem(Corkscrew.SDK.workflow.CSWorkflowManifestItem)">
      <summary>
            Deletes the manifest item from this manifest
            </summary>
      <param name="item">Manifest item to delete</param>
      <exception cref="T:System.UnauthorizedAccessException">If the user is not a Farm administrator</exception>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowManifest.Save">
      <summary>
            Saves any changes made to the manifest
            </summary>
      <exception cref="T:System.UnauthorizedAccessException">If the user is not a Farm administrator</exception>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowManifest.UpdateCompileResults">
      <summary>
            Updates the workflow manifest compilation results to the backend. This function should typically not be called 
            by anything other than a compiler engine.
            </summary>
      <exception cref="T:System.UnauthorizedAccessException">If the user is not a Farm administrator</exception>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifest.WorkflowClassName">
      <summary>
            Name of the workflow class (fully qualified, including namespace). This class will be instantiated and 
            executed by the CSWorkflowManager executive.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifest.WorkflowDefinition">
      <summary>
            Workflow definition this manifest belongs to
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifest.WorkflowEngine">
      <summary>
            Engine for the workflow
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.workflow.CSWorkflowManifestItem">
      <summary>
            Represents a single item in the Workflow Manifest
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifestItem.BuildtimeRelativeFolder">
      <summary>
            Relative folder at time of building the manifest
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifestItem.Created">
      <summary>
            Date and time of creation. 
            Set by constructor.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifestItem.CreatedBy">
      <summary>
            User who created.
            Set by constructor.
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowManifestItem.CreateManifestItem(Corkscrew.SDK.workflow.CSWorkflowManifest,System.String,System.String,Corkscrew.SDK.workflow.WorkflowManifestItemTypeEnum,System.Boolean,System.Byte[],System.String,System.String)">
      <summary>
            Create a new manifest item
            </summary>
      <param name="manifest">Manifest to add item to</param>
      <param name="fileName">Filename of file</param>
      <param name="filenameExtension">File extension name of file</param>
      <param name="type">Type of file</param>
      <param name="isRequiredForExecution">Whether required for execution</param>
      <param name="content">Content of the file as a byte array</param>
      <param name="buildRelativeFolder">Folder to place file in during build. Must be a relative path (file will be hosted in a temporary folder).</param>
      <param name="runtimeRelativeFolder">Folder to place file when running the workflow. Must be a relative path (file will be hosted in a temporary folder).</param>
      <returns>Created manifest item</returns>
      <exception cref="T:System.UnauthorizedAccessException">If the user is not a Farm administrator</exception>
      <exception cref="T:System.ArgumentNullException">If manifest is null, if both fileName and filenameExtension are empty, if the content is empty for an item that is not a PrimaryAssembly</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If type is Unknown</exception>
      <exception cref="T:System.ArgumentException">If type is a Xaml file but the manifest.WorkflowEngine is not a Xaml-type, or filenameExtension does not match the item type, 
            if the buildRelativeFolder or runtimeRelativeFolder are rooted paths, an item with the same filename and extension already exists</exception>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifestItem.FileContent">
      <summary>
            The file content of this manifest item
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifestItem.FileContentSize">
      <summary>
            Gets the size of the FileContent byte array
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifestItem.Filename">
      <summary>
            Get/set filename. Must follow file-naming guidelines of the underlying OS.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifestItem.FilenameExtension">
      <summary>
            Get/set filename extension
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifestItem.FilenameWithExtension">
      <summary>
            Returns the filename with extension. 
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowManifestItem.GetFullPathForCompiler(System.String)">
      <summary>
            Returns the full path this item would exist at for the compiler
            </summary>
      <param name="tempFolderPath">Absolute path on the disk storage where the temporary folder is hosted</param>
      <returns>Full path string</returns>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowManifestItem.GetFullPathForRuntime(System.String)">
      <summary>
            Returns the full path this item would exist at for the runtime
            </summary>
      <param name="tempFolderPath">Absolute path on the disk storage where the temporary folder is hosted</param>
      <returns>Full path string</returns>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifestItem.Id">
      <summary>
            Item Id
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifestItem.IsCompilerInput">
      <summary>
            Returns true if this item needs to be passed to the compiler engine
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifestItem.IsRuntimeComponent">
      <summary>
            Returns true if this item needs to be present at runtime
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifestItem.ItemType">
      <summary>
            Type of item
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifestItem.Modified">
      <summary>
            Date and time of modification. 
            Set internally or by persistence.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifestItem.ModifiedBy">
      <summary>
            User who modified. 
            Set internally or by persistence.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifestItem.MustCompile">
      <summary>
            Returns true if item must be compiled (if it is a compiler input)
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifestItem.RequiredForExecution">
      <summary>
            Indicates the item is required at runtime. if set, item is copied to the RuntimeRelativeFolder
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifestItem.RuntimeRelativeFolder">
      <summary>
            Relative folder at time of running the workflow
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowManifestItem.Save">
      <summary>
            Save changes to this item
            </summary>
      <returns>Success or failure</returns>
      <exception cref="T:System.UnauthorizedAccessException">If the user is not a Farm administrator</exception>
      <exception cref="T:System.ArgumentNullException">If manifest is null, if both fileName and filenameExtension are empty, if the content is empty for an item that is not a PrimaryAssembly</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If type is Unknown</exception>
      <exception cref="T:System.ArgumentException">If type is a Xaml file but the manifest.WorkflowEngine is not a Xaml-type, or filenameExtension does not match the item type, 
            if the buildRelativeFolder or runtimeRelativeFolder are rooted paths, an item with the same filename and extension already exists</exception>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifestItem.WorkflowDefinition">
      <summary>
            Gets the Workflow definition (equal to accessing WorkflowManifest.WorkflowDefinition)
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowManifestItem.WorkflowManifest">
      <summary>
            Workflow manifest this item belongs to. Each manifest item can belong to only one manifest (that is, items cannot be shared among different manifests).
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowManifestItem.WriteToDiskForCompiler(System.String)">
      <summary>
            Writes the file content to the disk, using the Build folder
            </summary>
      <param name="diskFolderPath">Absolute path on the disk storage to write to</param>
      <returns>The full path of the file that was created</returns>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowManifestItem.WriteToDiskForRuntime(System.String)">
      <summary>
            Writes the file content to the disk, using the Runtime folder
            </summary>
      <param name="diskFolderPath">Absolute path on the disk storage to write to</param>
      <returns>The full path of the file that was created</returns>
    </member>
    <member name="T:Corkscrew.SDK.workflow.CSWorkflowRuntimeContext">
      <summary>
            This class contains properties passed into a workflow when it is "run". This includes 
            both initialization and continuation runs. 
            This is a runtime class, and not persisted anywhere.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowRuntimeContext.Association">
      <summary>
            The specific association of this trigger
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowRuntimeContext.AssociationId">
      <summary>
            Guid of the workflow association.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowRuntimeContext.CorrelationId">
      <summary>
            Guid for correlating between all runs of this workflow
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.CSWorkflowRuntimeContext.CreateContext(Corkscrew.SDK.workflow.CSWorkflowInstance)">
      <summary>
            Create an instance of the context
            </summary>
      <param name="instance">Reference to the Corkscrew workflow instance the properties are being created for</param>
      <returns>The created context</returns>
      <exception cref="T:System.ArgumentNullException">If instance is null</exception>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowRuntimeContext.Credential">
      <summary>
            Credential to be used for the association
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowRuntimeContext.Definition">
      <summary>
            The workflow definition
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowRuntimeContext.Instance">
      <summary>
            This particular instance
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowRuntimeContext.State">
      <summary>
            The current state of this workflow instance
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.CSWorkflowRuntimeContext.WorkflowId">
      <summary>
            Guid of the workflow. Returns the Id of the underlying definition.
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.workflow.ExampleWorkflowSiteCreated">
      <summary>
            This is an example workflow that should be set to fire when a new site is created
            </summary>
    </member>
    <member name="M:Corkscrew.SDK.workflow.ExampleWorkflowSiteCreated.#ctor(Corkscrew.SDK.workflow.CSWorkflowInstance)">
      <summary>
            Constructor
            </summary>
      <param name="instance">Workflow instance that was started</param>
    </member>
    <member name="M:Corkscrew.SDK.workflow.ExampleWorkflowSiteCreated.OnError(Corkscrew.SDK.workflow.CSWorkflowInstance,Corkscrew.SDK.workflow.CSWorkflowEventArgs)">
      <summary>
            The Workflow errored event handler
            </summary>
      <param name="sender">Instance that errored</param>
      <param name="e">Workflow event arguments</param>
    </member>
    <member name="M:Corkscrew.SDK.workflow.ExampleWorkflowSiteCreated.OnStarted(Corkscrew.SDK.workflow.CSWorkflowInstance,Corkscrew.SDK.workflow.CSWorkflowEventArgs)">
      <summary>
            The Workflow started event
            </summary>
      <param name="sender">Instance that started</param>
      <param name="e">Workflow event arguments</param>
    </member>
    <member name="T:Corkscrew.SDK.workflow.ICSWorkflow">
      <summary>
            Workflow implementing apps must implement this interface or derive from CSWorkflow.
            </summary>
    </member>
    <member name="P:Corkscrew.SDK.workflow.ICSWorkflow.Context">
      <summary>
            Workflow runtime context
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.workflow.SignatureItemStateEnum">
      <summary>
            Status of a single signature item
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.SignatureItemStateEnum.NoResponse">
      <summary>
            User has not responded
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.SignatureItemStateEnum.Approved">
      <summary>
            Approved
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.SignatureItemStateEnum.Rejected">
      <summary>
            Rejected
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.SignatureItemStateEnum.OnTheFence">
      <summary>
            User is unable to either approve or reject
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.SignatureItemStateEnum.Expired">
      <summary>
            This is set when the Signature Panel terminates externally, 
            indicates signature collection was aborted before this user responded.
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.workflow.SignaturePanelCompleted">
      <summary>
            Signals completion of a signature panel
            </summary>
      <param name="sender">The signature panel instance that was completed</param>
    </member>
    <member name="T:Corkscrew.SDK.workflow.SignaturePanelStateEnum">
      <summary>
            Aggregate state of the signature panel
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.SignaturePanelStateEnum.NotStarted">
      <summary>
            Not yet started
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.SignaturePanelStateEnum.SentForResponses">
      <summary>
            Response collection is on-going, until all the responses have been received (or signature panel terminates)
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.SignaturePanelStateEnum.Approved">
      <summary>
            Approved
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.SignaturePanelStateEnum.Rejected">
      <summary>
            Rejected
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.SignaturePanelStateEnum.Deadlocked">
      <summary>
            Vote is neither approved nor rejected. This status will apply only 
            after the signature panel is terminated. Until then, even if the conditions match, the status 
            will remain SentForResponses.
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.SignaturePanelStateEnum.DeadlineExpired">
      <summary>
            The deadline for the panel expired. If this state is set, no member registered a vote within the 
            set deadline.
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.workflow.SignaturePanelTypeEnum">
      <summary>
            Type of signature panel
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.SignaturePanelTypeEnum.AtleastOneResponse">
      <summary>
            At least one person must respond. Whatever the first response is, 
            that will be taken
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.SignaturePanelTypeEnum.AtleastOneApproves">
      <summary>
            At least one person must approve. First "Approval" will terminate 
            signature panel
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.SignaturePanelTypeEnum.EvenOneRejects">
      <summary>
            If at least one person rejects, signature panel rejects
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.SignaturePanelTypeEnum.Unanimous">
      <summary>
            Votes must be unanimous. If all approve, signature panel is approved. If 
            all reject, signature panel is rejected. If there are a mix of approvals and 
            rejections, state is set to Deadlocked.
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.SignaturePanelTypeEnum.Majority">
      <summary>
            The decision of the majority of polled users will apply. 
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.workflow.WorkflowEngineEnum">
      <summary>
            Workflow engine names
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowEngineEnum.Undefined">
      <summary>
            Not defined
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowEngineEnum.CS1C">
      <summary>
            Corkscrew coded workflow
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowEngineEnum.WF4C">
      <summary>
            Coded v4.0 workflow
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowEngineEnum.WF4X">
      <summary>
            Xaml v4.0 workflow
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowEngineEnum.WF3C">
      <summary>
            Coded v3.0 workflow
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowEngineEnum.WF3X">
      <summary>
            Xaml v3.0 workflow
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.workflow.WorkflowEventHandler">
      <summary>
            Event handler for the Corkscrew Workflow events
            </summary>
      <param name="sender">The workflow instance that is raising the event</param>
      <param name="e">The workflow event args. Set e.Terminate to True to terminate the workflow on returning from this handler</param>
    </member>
    <member name="T:Corkscrew.SDK.workflow.WorkflowManifestItemTypeEnum">
      <summary>
            Type of workflow manifest item. 
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowManifestItemTypeEnum.Unknown">
      <summary>
            Not known
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowManifestItemTypeEnum.PrimaryAssembly">
      <summary>
            Primary assembly (contains the entry point class and function)
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowManifestItemTypeEnum.DependencyAssembly">
      <summary>
            A dependency or satellite assembly that is used by the PrimaryAssembly
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowManifestItemTypeEnum.SourceCodeFile">
      <summary>
            A code-behind or code file (.cs or .vb)
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowManifestItemTypeEnum.XamlFile">
      <summary>
            A Xaml file (.xaml)
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowManifestItemTypeEnum.ConfigurationFile">
      <summary>
            A .config file
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowManifestItemTypeEnum.MediaResourceFile">
      <summary>
            A media resource (pictures, audio, video)
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowManifestItemTypeEnum.Stylesheet">
      <summary>
            CSS stylesheet
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowManifestItemTypeEnum.CustomDataFile">
      <summary>
            A custom data file (can be .txt, .xml, etc)
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowManifestItemTypeEnum.ResourceFile">
      <summary>
            A resource file (.resx, .resources, etc)
            </summary>
    </member>
    <member name="T:Corkscrew.SDK.workflow.WorkflowTriggerEventNamesEnum">
      <summary>
            Names for workflow trigger events as an Enum.
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowTriggerEventNamesEnum.None">
      <summary>
            Default value, no event. Is an invalid value to set. 
            When used in a "check" operation, this evaluates to "Any".
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowTriggerEventNamesEnum.farm_created">
      <summary>
            Farm created. 
            This event is not raised at this time since farm is already provisioned at install time!
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowTriggerEventNamesEnum.farm_modified">
      <summary>
            Farm modified. 
            Raised on any configuration changes or creation/modification/deletion of sites within farm. 
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowTriggerEventNamesEnum.farm_deleted">
      <summary>
            Farm deleted. 
            This event is not raised at this time since there is no place for this workflow to run after the farm is gone.
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowTriggerEventNamesEnum.site_created">
      <summary>
            Site created.
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowTriggerEventNamesEnum.site_modified">
      <summary>
            Site modified. 
            Triggered only on site configuration (Name, DNS, database) changes.
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowTriggerEventNamesEnum.site_deleted">
      <summary>
            Site deleted.
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowTriggerEventNamesEnum.directory_created">
      <summary>
            Directory created.
            Bubbles to site_modified.
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowTriggerEventNamesEnum.directory_modified">
      <summary>
            Directory modified. 
            Triggered when directory properties are changed or files are added/removed in the directory. 
            Bubbles to site_modified.
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowTriggerEventNamesEnum.directory_deleted">
      <summary>
            Directory deleted.
            Bubbles to site_modified.
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowTriggerEventNamesEnum.file_created">
      <summary>
            File created.
            Bubbles to directory_modified.
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowTriggerEventNamesEnum.file_modified">
      <summary>
            File modified.
            Bubbles to directory_modified.
            </summary>
    </member>
    <member name="F:Corkscrew.SDK.workflow.WorkflowTriggerEventNamesEnum.file_deleted">
      <summary>
            File deleted. 
            Bubbles to directory_modified.
            </summary>
    </member>
  </members>
</doc>