using System.Collections.Generic;
using System.Diagnostics;

namespace CMS.Setup.Installers
{
    /// <summary>
    /// This installer runs a tool to perform its work.
    /// </summary>
    public class ToolRunnerInstaller : WindowsInstaller
    {

        #region Properties

        /// <summary>
        /// Executable that is the tool, full path
        /// </summary>
        public string InstallToolName
        {
            get;
            set;
        }

        /// <summary>
        /// Parameters to pass to tool if applicable
        /// </summary>
        public string InstallToolArguments
        {
            get;
            set;
        }

        /// <summary>
        /// Executable that is the uninstall tool, full path
        /// </summary>
        public string UninstallToolName
        {
            get;
            set;
        }

        /// <summary>
        /// Parameters to pass to tool if applicable
        /// </summary>
        public string UninstallToolArguments
        {
            get;
            set;
        }

        /// <summary>
        /// Executable that is the repair tool, full path
        /// </summary>
        public string RepairToolName
        {
            get;
            set;
        }

        /// <summary>
        /// Parameters to pass to tool if applicable
        /// </summary>
        public string RepairToolArguments
        {
            get;
            set;
        }

        /// <summary>
        /// Full path to the log file generated by the tool
        /// </summary>
        public string PostActionLogfileName
        {
            get;
            set;
        }

        #endregion

        #region Constructors

        public ToolRunnerInstaller()
            : base()
        {

        }

        #endregion

        #region Methods

        public override bool Install()
        {
            RunTool(InstallToolName, InstallToolArguments);
            return true;
        }

        public override bool Repair()
        {
            RunTool(RepairToolName, RepairToolArguments);
            return true;
        }

        public override void Uninstall()
        {
            RunTool(UninstallToolName, UninstallToolArguments);
        }

        private void RunTool(string command, string arguments)
        {
            if (string.IsNullOrEmpty(command))
            {
                return;
            }

            ProcessStartInfo toolStartInfo = new ProcessStartInfo(command, arguments)
            {
                CreateNoWindow = false,
                ErrorDialog = false,
                LoadUserProfile = false
            };

            Process tool = Process.Start(toolStartInfo);
            tool.WaitForExit();
        }

        /// <summary>
        /// Resolve all path properties in the installer
        /// </summary>
        /// <param name="environment">Key is special variable name, Value is value of that variable</param>
        /// <remarks>Variables are: 
        ///  $(InstallSource) - will be Application.StartupPath + "_layout" (absolute path)
        ///  $(InstallTargetRoot) - OperationManifest.InstallBaseDirectory (absolute path)
        ///  $(ComponentSource) - the particular path within $(InstallSource) where the files for this component are located (absolute path)
        ///  $(ComponentDestination) - ComponentInstaller.InstallFolderName (relative path)
        ///  $(ComponentName) - name of the current component from the manifest Xml
        /// </remarks>
        public override void ResolvePathProperties(Dictionary<string, string> environment)
        {
            foreach (string variable in environment.Keys)
            {
                InstallToolName = ((InstallToolName == null) ? null : InstallToolName.Replace(variable, environment[variable]));
                RepairToolName = ((RepairToolName == null) ? null : RepairToolName.Replace(variable, environment[variable]));
                UninstallToolName = ((UninstallToolName == null) ? null : UninstallToolName.Replace(variable, environment[variable]));

                InstallToolArguments = ((InstallToolArguments == null) ? null : InstallToolArguments.Replace(variable, environment[variable]));
                RepairToolArguments = ((RepairToolArguments == null) ? null : RepairToolArguments.Replace(variable, environment[variable]));
                UninstallToolArguments = ((UninstallToolArguments == null) ? null : UninstallToolArguments.Replace(variable, environment[variable]));
            }
        }

        #endregion
    }
}
